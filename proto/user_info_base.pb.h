// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5finfo_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5finfo_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5finfo_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5finfo_5fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5finfo_5fbase_2eproto;
namespace raybo {
class UserInfoBase;
struct UserInfoBaseDefaultTypeInternal;
extern UserInfoBaseDefaultTypeInternal _UserInfoBase_default_instance_;
}  // namespace raybo
PROTOBUF_NAMESPACE_OPEN
template<> ::raybo::UserInfoBase* Arena::CreateMaybeMessage<::raybo::UserInfoBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raybo {

// ===================================================================

class UserInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.UserInfoBase) */ {
 public:
  inline UserInfoBase() : UserInfoBase(nullptr) {}
  ~UserInfoBase() override;
  explicit PROTOBUF_CONSTEXPR UserInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoBase(const UserInfoBase& from);
  UserInfoBase(UserInfoBase&& from) noexcept
    : UserInfoBase() {
    *this = ::std::move(from);
  }

  inline UserInfoBase& operator=(const UserInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoBase& operator=(UserInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoBase* internal_default_instance() {
    return reinterpret_cast<const UserInfoBase*>(
               &_UserInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoBase& a, UserInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfoBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.UserInfoBase";
  }
  protected:
  explicit UserInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kNickNameFieldNumber = 4,
    kPasswordFieldNumber = 11,
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kRegTimeFieldNumber = 5,
    kFromFieldNumber = 6,
    kLoginTimeFieldNumber = 7,
    kLastLoginTimeFieldNumber = 8,
    kFreshTimeFieldNumber = 9,
    kLogoutTimeFieldNumber = 10,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string nick_name = 4;
  bool has_nick_name() const;
  private:
  bool _internal_has_nick_name() const;
  public:
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // optional string password = 11;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional uint32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  uint32_t ver() const;
  void set_ver(uint32_t value);
  private:
  uint32_t _internal_ver() const;
  void _internal_set_ver(uint32_t value);
  public:

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // optional uint32 reg_time = 5;
  bool has_reg_time() const;
  private:
  bool _internal_has_reg_time() const;
  public:
  void clear_reg_time();
  uint32_t reg_time() const;
  void set_reg_time(uint32_t value);
  private:
  uint32_t _internal_reg_time() const;
  void _internal_set_reg_time(uint32_t value);
  public:

  // optional uint32 from = 6;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // optional uint32 login_time = 7;
  bool has_login_time() const;
  private:
  bool _internal_has_login_time() const;
  public:
  void clear_login_time();
  uint32_t login_time() const;
  void set_login_time(uint32_t value);
  private:
  uint32_t _internal_login_time() const;
  void _internal_set_login_time(uint32_t value);
  public:

  // optional uint32 last_login_time = 8;
  bool has_last_login_time() const;
  private:
  bool _internal_has_last_login_time() const;
  public:
  void clear_last_login_time();
  uint32_t last_login_time() const;
  void set_last_login_time(uint32_t value);
  private:
  uint32_t _internal_last_login_time() const;
  void _internal_set_last_login_time(uint32_t value);
  public:

  // optional uint32 fresh_time = 9;
  bool has_fresh_time() const;
  private:
  bool _internal_has_fresh_time() const;
  public:
  void clear_fresh_time();
  uint32_t fresh_time() const;
  void set_fresh_time(uint32_t value);
  private:
  uint32_t _internal_fresh_time() const;
  void _internal_set_fresh_time(uint32_t value);
  public:

  // optional uint32 logout_time = 10;
  bool has_logout_time() const;
  private:
  bool _internal_has_logout_time() const;
  public:
  void clear_logout_time();
  uint32_t logout_time() const;
  void set_logout_time(uint32_t value);
  private:
  uint32_t _internal_logout_time() const;
  void _internal_set_logout_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.UserInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint32_t ver_;
    uint32_t user_id_;
    uint32_t reg_time_;
    uint32_t from_;
    uint32_t login_time_;
    uint32_t last_login_time_;
    uint32_t fresh_time_;
    uint32_t logout_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoBase

// optional uint32 ver = 1;
inline bool UserInfoBase::_internal_has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserInfoBase::has_ver() const {
  return _internal_has_ver();
}
inline void UserInfoBase::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UserInfoBase::_internal_ver() const {
  return _impl_.ver_;
}
inline uint32_t UserInfoBase::ver() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.ver)
  return _internal_ver();
}
inline void UserInfoBase::_internal_set_ver(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ver_ = value;
}
inline void UserInfoBase::set_ver(uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.ver)
}

// optional uint32 user_id = 2;
inline bool UserInfoBase::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserInfoBase::has_user_id() const {
  return _internal_has_user_id();
}
inline void UserInfoBase::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UserInfoBase::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t UserInfoBase::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.user_id)
  return _internal_user_id();
}
inline void UserInfoBase::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void UserInfoBase::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.user_id)
}

// optional string user_name = 3;
inline bool UserInfoBase::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfoBase::has_user_name() const {
  return _internal_has_user_name();
}
inline void UserInfoBase::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfoBase::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoBase::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.user_name)
}
inline std::string* UserInfoBase::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.UserInfoBase.user_name)
  return _s;
}
inline const std::string& UserInfoBase::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void UserInfoBase::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoBase::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoBase::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.UserInfoBase.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfoBase::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.UserInfoBase.user_name)
}

// optional string nick_name = 4;
inline bool UserInfoBase::_internal_has_nick_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfoBase::has_nick_name() const {
  return _internal_has_nick_name();
}
inline void UserInfoBase::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInfoBase::nick_name() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoBase::set_nick_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.nick_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.nick_name)
}
inline std::string* UserInfoBase::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:raybo.UserInfoBase.nick_name)
  return _s;
}
inline const std::string& UserInfoBase::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void UserInfoBase::_internal_set_nick_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoBase::_internal_mutable_nick_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoBase::release_nick_name() {
  // @@protoc_insertion_point(field_release:raybo.UserInfoBase.nick_name)
  if (!_internal_has_nick_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.nick_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfoBase::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.UserInfoBase.nick_name)
}

// optional uint32 reg_time = 5;
inline bool UserInfoBase::_internal_has_reg_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserInfoBase::has_reg_time() const {
  return _internal_has_reg_time();
}
inline void UserInfoBase::clear_reg_time() {
  _impl_.reg_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t UserInfoBase::_internal_reg_time() const {
  return _impl_.reg_time_;
}
inline uint32_t UserInfoBase::reg_time() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.reg_time)
  return _internal_reg_time();
}
inline void UserInfoBase::_internal_set_reg_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reg_time_ = value;
}
inline void UserInfoBase::set_reg_time(uint32_t value) {
  _internal_set_reg_time(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.reg_time)
}

// optional uint32 from = 6;
inline bool UserInfoBase::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserInfoBase::has_from() const {
  return _internal_has_from();
}
inline void UserInfoBase::clear_from() {
  _impl_.from_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t UserInfoBase::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t UserInfoBase::from() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.from)
  return _internal_from();
}
inline void UserInfoBase::_internal_set_from(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.from_ = value;
}
inline void UserInfoBase::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.from)
}

// optional uint32 login_time = 7;
inline bool UserInfoBase::_internal_has_login_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserInfoBase::has_login_time() const {
  return _internal_has_login_time();
}
inline void UserInfoBase::clear_login_time() {
  _impl_.login_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t UserInfoBase::_internal_login_time() const {
  return _impl_.login_time_;
}
inline uint32_t UserInfoBase::login_time() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.login_time)
  return _internal_login_time();
}
inline void UserInfoBase::_internal_set_login_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.login_time_ = value;
}
inline void UserInfoBase::set_login_time(uint32_t value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.login_time)
}

// optional uint32 last_login_time = 8;
inline bool UserInfoBase::_internal_has_last_login_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UserInfoBase::has_last_login_time() const {
  return _internal_has_last_login_time();
}
inline void UserInfoBase::clear_last_login_time() {
  _impl_.last_login_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t UserInfoBase::_internal_last_login_time() const {
  return _impl_.last_login_time_;
}
inline uint32_t UserInfoBase::last_login_time() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.last_login_time)
  return _internal_last_login_time();
}
inline void UserInfoBase::_internal_set_last_login_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.last_login_time_ = value;
}
inline void UserInfoBase::set_last_login_time(uint32_t value) {
  _internal_set_last_login_time(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.last_login_time)
}

// optional uint32 fresh_time = 9;
inline bool UserInfoBase::_internal_has_fresh_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UserInfoBase::has_fresh_time() const {
  return _internal_has_fresh_time();
}
inline void UserInfoBase::clear_fresh_time() {
  _impl_.fresh_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t UserInfoBase::_internal_fresh_time() const {
  return _impl_.fresh_time_;
}
inline uint32_t UserInfoBase::fresh_time() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.fresh_time)
  return _internal_fresh_time();
}
inline void UserInfoBase::_internal_set_fresh_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.fresh_time_ = value;
}
inline void UserInfoBase::set_fresh_time(uint32_t value) {
  _internal_set_fresh_time(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.fresh_time)
}

// optional uint32 logout_time = 10;
inline bool UserInfoBase::_internal_has_logout_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UserInfoBase::has_logout_time() const {
  return _internal_has_logout_time();
}
inline void UserInfoBase::clear_logout_time() {
  _impl_.logout_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t UserInfoBase::_internal_logout_time() const {
  return _impl_.logout_time_;
}
inline uint32_t UserInfoBase::logout_time() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.logout_time)
  return _internal_logout_time();
}
inline void UserInfoBase::_internal_set_logout_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.logout_time_ = value;
}
inline void UserInfoBase::set_logout_time(uint32_t value) {
  _internal_set_logout_time(value);
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.logout_time)
}

// optional string password = 11;
inline bool UserInfoBase::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserInfoBase::has_password() const {
  return _internal_has_password();
}
inline void UserInfoBase::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserInfoBase::password() const {
  // @@protoc_insertion_point(field_get:raybo.UserInfoBase.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoBase::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.UserInfoBase.password)
}
inline std::string* UserInfoBase::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:raybo.UserInfoBase.password)
  return _s;
}
inline const std::string& UserInfoBase::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserInfoBase::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoBase::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoBase::release_password() {
  // @@protoc_insertion_point(field_release:raybo.UserInfoBase.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserInfoBase::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.UserInfoBase.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace raybo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5finfo_5fbase_2eproto
