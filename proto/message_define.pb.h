// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fdefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fdefine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fdefine_2eproto;
namespace raybo {
class AddFriendReq;
struct AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
struct AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class CheckUserExistReq;
struct CheckUserExistReqDefaultTypeInternal;
extern CheckUserExistReqDefaultTypeInternal _CheckUserExistReq_default_instance_;
class CheckUserExistRsp;
struct CheckUserExistRspDefaultTypeInternal;
extern CheckUserExistRspDefaultTypeInternal _CheckUserExistRsp_default_instance_;
class CommonReq;
struct CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
class CommonRsp;
struct CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class CreateUserReq;
struct CreateUserReqDefaultTypeInternal;
extern CreateUserReqDefaultTypeInternal _CreateUserReq_default_instance_;
class CreateUserRsp;
struct CreateUserRspDefaultTypeInternal;
extern CreateUserRspDefaultTypeInternal _CreateUserRsp_default_instance_;
class DelFriendReq;
struct DelFriendReqDefaultTypeInternal;
extern DelFriendReqDefaultTypeInternal _DelFriendReq_default_instance_;
class DelFriendRsp;
struct DelFriendRspDefaultTypeInternal;
extern DelFriendRspDefaultTypeInternal _DelFriendRsp_default_instance_;
class GetMessageListReq;
struct GetMessageListReqDefaultTypeInternal;
extern GetMessageListReqDefaultTypeInternal _GetMessageListReq_default_instance_;
class GetMessageListRsp;
struct GetMessageListRspDefaultTypeInternal;
extern GetMessageListRspDefaultTypeInternal _GetMessageListRsp_default_instance_;
class GetPhotoReq;
struct GetPhotoReqDefaultTypeInternal;
extern GetPhotoReqDefaultTypeInternal _GetPhotoReq_default_instance_;
class GetPhotoRsp;
struct GetPhotoRspDefaultTypeInternal;
extern GetPhotoRspDefaultTypeInternal _GetPhotoRsp_default_instance_;
class GetUserIdByNameReq;
struct GetUserIdByNameReqDefaultTypeInternal;
extern GetUserIdByNameReqDefaultTypeInternal _GetUserIdByNameReq_default_instance_;
class GetUserIdByNameRsp;
struct GetUserIdByNameRspDefaultTypeInternal;
extern GetUserIdByNameRspDefaultTypeInternal _GetUserIdByNameRsp_default_instance_;
class LoginCheckReq;
struct LoginCheckReqDefaultTypeInternal;
extern LoginCheckReqDefaultTypeInternal _LoginCheckReq_default_instance_;
class LoginCheckRsp;
struct LoginCheckRspDefaultTypeInternal;
extern LoginCheckRspDefaultTypeInternal _LoginCheckRsp_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
struct LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class LogoutReq;
struct LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutRsp;
struct LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class MessageItem;
struct MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class PublishMessageReq;
struct PublishMessageReqDefaultTypeInternal;
extern PublishMessageReqDefaultTypeInternal _PublishMessageReq_default_instance_;
class PublishMessageRsp;
struct PublishMessageRspDefaultTypeInternal;
extern PublishMessageRspDefaultTypeInternal _PublishMessageRsp_default_instance_;
class RegReq;
struct RegReqDefaultTypeInternal;
extern RegReqDefaultTypeInternal _RegReq_default_instance_;
class RegRsp;
struct RegRspDefaultTypeInternal;
extern RegRspDefaultTypeInternal _RegRsp_default_instance_;
class ServerToUserReq;
struct ServerToUserReqDefaultTypeInternal;
extern ServerToUserReqDefaultTypeInternal _ServerToUserReq_default_instance_;
class UserToServerRsp;
struct UserToServerRspDefaultTypeInternal;
extern UserToServerRspDefaultTypeInternal _UserToServerRsp_default_instance_;
}  // namespace raybo
PROTOBUF_NAMESPACE_OPEN
template<> ::raybo::AddFriendReq* Arena::CreateMaybeMessage<::raybo::AddFriendReq>(Arena*);
template<> ::raybo::AddFriendRsp* Arena::CreateMaybeMessage<::raybo::AddFriendRsp>(Arena*);
template<> ::raybo::CheckUserExistReq* Arena::CreateMaybeMessage<::raybo::CheckUserExistReq>(Arena*);
template<> ::raybo::CheckUserExistRsp* Arena::CreateMaybeMessage<::raybo::CheckUserExistRsp>(Arena*);
template<> ::raybo::CommonReq* Arena::CreateMaybeMessage<::raybo::CommonReq>(Arena*);
template<> ::raybo::CommonRsp* Arena::CreateMaybeMessage<::raybo::CommonRsp>(Arena*);
template<> ::raybo::CreateUserReq* Arena::CreateMaybeMessage<::raybo::CreateUserReq>(Arena*);
template<> ::raybo::CreateUserRsp* Arena::CreateMaybeMessage<::raybo::CreateUserRsp>(Arena*);
template<> ::raybo::DelFriendReq* Arena::CreateMaybeMessage<::raybo::DelFriendReq>(Arena*);
template<> ::raybo::DelFriendRsp* Arena::CreateMaybeMessage<::raybo::DelFriendRsp>(Arena*);
template<> ::raybo::GetMessageListReq* Arena::CreateMaybeMessage<::raybo::GetMessageListReq>(Arena*);
template<> ::raybo::GetMessageListRsp* Arena::CreateMaybeMessage<::raybo::GetMessageListRsp>(Arena*);
template<> ::raybo::GetPhotoReq* Arena::CreateMaybeMessage<::raybo::GetPhotoReq>(Arena*);
template<> ::raybo::GetPhotoRsp* Arena::CreateMaybeMessage<::raybo::GetPhotoRsp>(Arena*);
template<> ::raybo::GetUserIdByNameReq* Arena::CreateMaybeMessage<::raybo::GetUserIdByNameReq>(Arena*);
template<> ::raybo::GetUserIdByNameRsp* Arena::CreateMaybeMessage<::raybo::GetUserIdByNameRsp>(Arena*);
template<> ::raybo::LoginCheckReq* Arena::CreateMaybeMessage<::raybo::LoginCheckReq>(Arena*);
template<> ::raybo::LoginCheckRsp* Arena::CreateMaybeMessage<::raybo::LoginCheckRsp>(Arena*);
template<> ::raybo::LoginReq* Arena::CreateMaybeMessage<::raybo::LoginReq>(Arena*);
template<> ::raybo::LoginRsp* Arena::CreateMaybeMessage<::raybo::LoginRsp>(Arena*);
template<> ::raybo::LogoutReq* Arena::CreateMaybeMessage<::raybo::LogoutReq>(Arena*);
template<> ::raybo::LogoutRsp* Arena::CreateMaybeMessage<::raybo::LogoutRsp>(Arena*);
template<> ::raybo::MessageItem* Arena::CreateMaybeMessage<::raybo::MessageItem>(Arena*);
template<> ::raybo::MsgHeader* Arena::CreateMaybeMessage<::raybo::MsgHeader>(Arena*);
template<> ::raybo::PublishMessageReq* Arena::CreateMaybeMessage<::raybo::PublishMessageReq>(Arena*);
template<> ::raybo::PublishMessageRsp* Arena::CreateMaybeMessage<::raybo::PublishMessageRsp>(Arena*);
template<> ::raybo::RegReq* Arena::CreateMaybeMessage<::raybo::RegReq>(Arena*);
template<> ::raybo::RegRsp* Arena::CreateMaybeMessage<::raybo::RegRsp>(Arena*);
template<> ::raybo::ServerToUserReq* Arena::CreateMaybeMessage<::raybo::ServerToUserReq>(Arena*);
template<> ::raybo::UserToServerRsp* Arena::CreateMaybeMessage<::raybo::UserToServerRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raybo {

// ===================================================================

class MsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  explicit PROTOBUF_CONSTEXPR MsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kCmdTypeFieldNumber = 2,
  };
  // optional uint32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  uint32_t ver() const;
  void set_ver(uint32_t value);
  private:
  uint32_t _internal_ver() const;
  void _internal_set_ver(uint32_t value);
  public:

  // optional uint32 cmd_type = 2;
  bool has_cmd_type() const;
  private:
  bool _internal_has_cmd_type() const;
  public:
  void clear_cmd_type();
  uint32_t cmd_type() const;
  void set_cmd_type(uint32_t value);
  private:
  uint32_t _internal_cmd_type() const;
  void _internal_set_cmd_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ver_;
    uint32_t cmd_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class RegReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.RegReq) */ {
 public:
  inline RegReq() : RegReq(nullptr) {}
  ~RegReq() override;
  explicit PROTOBUF_CONSTEXPR RegReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegReq(const RegReq& from);
  RegReq(RegReq&& from) noexcept
    : RegReq() {
    *this = ::std::move(from);
  }

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegReq& operator=(RegReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegReq* internal_default_instance() {
    return reinterpret_cast<const RegReq*>(
               &_RegReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegReq& a, RegReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.RegReq";
  }
  protected:
  explicit RegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kFromFieldNumber = 5,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 from = 5;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.RegReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::raybo::MsgHeader* header_;
    uint32_t from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class RegRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.RegRsp) */ {
 public:
  inline RegRsp() : RegRsp(nullptr) {}
  ~RegRsp() override;
  explicit PROTOBUF_CONSTEXPR RegRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegRsp(const RegRsp& from);
  RegRsp(RegRsp&& from) noexcept
    : RegRsp() {
    *this = ::std::move(from);
  }

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRsp& operator=(RegRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegRsp* internal_default_instance() {
    return reinterpret_cast<const RegRsp*>(
               &_RegRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegRsp& a, RegRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.RegRsp";
  }
  protected:
  explicit RegRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // optional uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.RegRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kVerFieldNumber = 1,
    kCmdTypeFieldNumber = 2,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional uint32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  uint32_t ver() const;
  void set_ver(uint32_t value);
  private:
  uint32_t _internal_ver() const;
  void _internal_set_ver(uint32_t value);
  public:

  // optional uint32 cmd_type = 2;
  bool has_cmd_type() const;
  private:
  bool _internal_has_cmd_type() const;
  public:
  void clear_cmd_type();
  uint32_t cmd_type() const;
  void set_cmd_type(uint32_t value);
  private:
  uint32_t _internal_cmd_type() const;
  void _internal_set_cmd_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint32_t ver_;
    uint32_t cmd_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  ~LoginRsp() override;
  explicit PROTOBUF_CONSTEXPR LoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kCmdTypeFieldNumber = 2,
    kRetFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // optional uint32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  uint32_t ver() const;
  void set_ver(uint32_t value);
  private:
  uint32_t _internal_ver() const;
  void _internal_set_ver(uint32_t value);
  public:

  // optional uint32 cmd_type = 2;
  bool has_cmd_type() const;
  private:
  bool _internal_has_cmd_type() const;
  public:
  void clear_cmd_type();
  uint32_t cmd_type() const;
  void set_cmd_type(uint32_t value);
  private:
  uint32_t _internal_cmd_type() const;
  void _internal_set_cmd_type(uint32_t value);
  public:

  // optional uint32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // optional uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ver_;
    uint32_t cmd_type_;
    uint32_t ret_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LogoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LogoutReq) */ {
 public:
  inline LogoutReq() : LogoutReq(nullptr) {}
  ~LogoutReq() override;
  explicit PROTOBUF_CONSTEXPR LogoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutReq(const LogoutReq& from);
  LogoutReq(LogoutReq&& from) noexcept
    : LogoutReq() {
    *this = ::std::move(from);
  }

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutReq& operator=(LogoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogoutReq& a, LogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LogoutReq";
  }
  protected:
  explicit LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 3,
  };
  // optional uint32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.LogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LogoutRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LogoutRsp) */ {
 public:
  inline LogoutRsp() : LogoutRsp(nullptr) {}
  ~LogoutRsp() override;
  explicit PROTOBUF_CONSTEXPR LogoutRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutRsp(const LogoutRsp& from);
  LogoutRsp(LogoutRsp&& from) noexcept
    : LogoutRsp() {
    *this = ::std::move(from);
  }

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRsp& operator=(LogoutRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogoutRsp& a, LogoutRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LogoutRsp";
  }
  protected:
  explicit LogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 2,
  };
  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.LogoutRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.AddFriendReq) */ {
 public:
  inline AddFriendReq() : AddFriendReq(nullptr) {}
  ~AddFriendReq() override;
  explicit PROTOBUF_CONSTEXPR AddFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendReq(const AddFriendReq& from);
  AddFriendReq(AddFriendReq&& from) noexcept
    : AddFriendReq() {
    *this = ::std::move(from);
  }

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
               &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddFriendReq& a, AddFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.AddFriendReq";
  }
  protected:
  explicit AddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kOtherIdFieldNumber = 3,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // optional uint32 other_id = 3;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  uint32_t other_id() const;
  void set_other_id(uint32_t value);
  private:
  uint32_t _internal_other_id() const;
  void _internal_set_other_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.AddFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t user_id_;
    uint32_t other_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.AddFriendRsp) */ {
 public:
  inline AddFriendRsp() : AddFriendRsp(nullptr) {}
  ~AddFriendRsp() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRsp(const AddFriendRsp& from);
  AddFriendRsp(AddFriendRsp&& from) noexcept
    : AddFriendRsp() {
    *this = ::std::move(from);
  }

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
               &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddFriendRsp& a, AddFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.AddFriendRsp";
  }
  protected:
  explicit AddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.AddFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.DelFriendReq) */ {
 public:
  inline DelFriendReq() : DelFriendReq(nullptr) {}
  ~DelFriendReq() override;
  explicit PROTOBUF_CONSTEXPR DelFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendReq(const DelFriendReq& from);
  DelFriendReq(DelFriendReq&& from) noexcept
    : DelFriendReq() {
    *this = ::std::move(from);
  }

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendReq& operator=(DelFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendReq* internal_default_instance() {
    return reinterpret_cast<const DelFriendReq*>(
               &_DelFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DelFriendReq& a, DelFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.DelFriendReq";
  }
  protected:
  explicit DelFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kOtherIdFieldNumber = 3,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // optional uint32 other_id = 3;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  uint32_t other_id() const;
  void set_other_id(uint32_t value);
  private:
  uint32_t _internal_other_id() const;
  void _internal_set_other_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.DelFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t user_id_;
    uint32_t other_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.DelFriendRsp) */ {
 public:
  inline DelFriendRsp() : DelFriendRsp(nullptr) {}
  ~DelFriendRsp() override;
  explicit PROTOBUF_CONSTEXPR DelFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendRsp(const DelFriendRsp& from);
  DelFriendRsp(DelFriendRsp&& from) noexcept
    : DelFriendRsp() {
    *this = ::std::move(from);
  }

  inline DelFriendRsp& operator=(const DelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendRsp& operator=(DelFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendRsp* internal_default_instance() {
    return reinterpret_cast<const DelFriendRsp*>(
               &_DelFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DelFriendRsp& a, DelFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.DelFriendRsp";
  }
  protected:
  explicit DelFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.DelFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.PublishMessageReq) */ {
 public:
  inline PublishMessageReq() : PublishMessageReq(nullptr) {}
  ~PublishMessageReq() override;
  explicit PROTOBUF_CONSTEXPR PublishMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageReq(const PublishMessageReq& from);
  PublishMessageReq(PublishMessageReq&& from) noexcept
    : PublishMessageReq() {
    *this = ::std::move(from);
  }

  inline PublishMessageReq& operator=(const PublishMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageReq& operator=(PublishMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageReq* internal_default_instance() {
    return reinterpret_cast<const PublishMessageReq*>(
               &_PublishMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublishMessageReq& a, PublishMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishMessageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.PublishMessageReq";
  }
  protected:
  explicit PublishMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.PublishMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::raybo::MsgHeader* header_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.PublishMessageRsp) */ {
 public:
  inline PublishMessageRsp() : PublishMessageRsp(nullptr) {}
  ~PublishMessageRsp() override;
  explicit PROTOBUF_CONSTEXPR PublishMessageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageRsp(const PublishMessageRsp& from);
  PublishMessageRsp(PublishMessageRsp&& from) noexcept
    : PublishMessageRsp() {
    *this = ::std::move(from);
  }

  inline PublishMessageRsp& operator=(const PublishMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageRsp& operator=(PublishMessageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageRsp* internal_default_instance() {
    return reinterpret_cast<const PublishMessageRsp*>(
               &_PublishMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PublishMessageRsp& a, PublishMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishMessageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.PublishMessageRsp";
  }
  protected:
  explicit PublishMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.PublishMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetMessageListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetMessageListReq) */ {
 public:
  inline GetMessageListReq() : GetMessageListReq(nullptr) {}
  ~GetMessageListReq() override;
  explicit PROTOBUF_CONSTEXPR GetMessageListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMessageListReq(const GetMessageListReq& from);
  GetMessageListReq(GetMessageListReq&& from) noexcept
    : GetMessageListReq() {
    *this = ::std::move(from);
  }

  inline GetMessageListReq& operator=(const GetMessageListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageListReq& operator=(GetMessageListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessageListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessageListReq* internal_default_instance() {
    return reinterpret_cast<const GetMessageListReq*>(
               &_GetMessageListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetMessageListReq& a, GetMessageListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessageListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessageListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMessageListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMessageListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetMessageListReq";
  }
  protected:
  explicit GetMessageListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.GetMessageListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class MessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.MessageItem) */ {
 public:
  inline MessageItem() : MessageItem(nullptr) {}
  ~MessageItem() override;
  explicit PROTOBUF_CONSTEXPR MessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageItem(const MessageItem& from);
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.MessageItem";
  }
  protected:
  explicit MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kPublisherIdFieldNumber = 1,
    kPublishTimeFieldNumber = 2,
  };
  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint32 publisher_id = 1;
  bool has_publisher_id() const;
  private:
  bool _internal_has_publisher_id() const;
  public:
  void clear_publisher_id();
  uint32_t publisher_id() const;
  void set_publisher_id(uint32_t value);
  private:
  uint32_t _internal_publisher_id() const;
  void _internal_set_publisher_id(uint32_t value);
  public:

  // optional uint32 Publish_time = 2;
  bool has_publish_time() const;
  private:
  bool _internal_has_publish_time() const;
  public:
  void clear_publish_time();
  uint32_t publish_time() const;
  void set_publish_time(uint32_t value);
  private:
  uint32_t _internal_publish_time() const;
  void _internal_set_publish_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.MessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint32_t publisher_id_;
    uint32_t publish_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetMessageListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetMessageListRsp) */ {
 public:
  inline GetMessageListRsp() : GetMessageListRsp(nullptr) {}
  ~GetMessageListRsp() override;
  explicit PROTOBUF_CONSTEXPR GetMessageListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMessageListRsp(const GetMessageListRsp& from);
  GetMessageListRsp(GetMessageListRsp&& from) noexcept
    : GetMessageListRsp() {
    *this = ::std::move(from);
  }

  inline GetMessageListRsp& operator=(const GetMessageListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageListRsp& operator=(GetMessageListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessageListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessageListRsp* internal_default_instance() {
    return reinterpret_cast<const GetMessageListRsp*>(
               &_GetMessageListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetMessageListRsp& a, GetMessageListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessageListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessageListRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMessageListRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMessageListRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetMessageListRsp";
  }
  protected:
  explicit GetMessageListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageListFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // repeated .raybo.MessageItem message_list = 3;
  int message_list_size() const;
  private:
  int _internal_message_list_size() const;
  public:
  void clear_message_list();
  ::raybo::MessageItem* mutable_message_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raybo::MessageItem >*
      mutable_message_list();
  private:
  const ::raybo::MessageItem& _internal_message_list(int index) const;
  ::raybo::MessageItem* _internal_add_message_list();
  public:
  const ::raybo::MessageItem& message_list(int index) const;
  ::raybo::MessageItem* add_message_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raybo::MessageItem >&
      message_list() const;

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.GetMessageListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raybo::MessageItem > message_list_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetPhotoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetPhotoReq) */ {
 public:
  inline GetPhotoReq() : GetPhotoReq(nullptr) {}
  ~GetPhotoReq() override;
  explicit PROTOBUF_CONSTEXPR GetPhotoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhotoReq(const GetPhotoReq& from);
  GetPhotoReq(GetPhotoReq&& from) noexcept
    : GetPhotoReq() {
    *this = ::std::move(from);
  }

  inline GetPhotoReq& operator=(const GetPhotoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhotoReq& operator=(GetPhotoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhotoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhotoReq* internal_default_instance() {
    return reinterpret_cast<const GetPhotoReq*>(
               &_GetPhotoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetPhotoReq& a, GetPhotoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhotoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhotoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhotoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhotoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhotoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPhotoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetPhotoReq";
  }
  protected:
  explicit GetPhotoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.GetPhotoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetPhotoRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetPhotoRsp) */ {
 public:
  inline GetPhotoRsp() : GetPhotoRsp(nullptr) {}
  ~GetPhotoRsp() override;
  explicit PROTOBUF_CONSTEXPR GetPhotoRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhotoRsp(const GetPhotoRsp& from);
  GetPhotoRsp(GetPhotoRsp&& from) noexcept
    : GetPhotoRsp() {
    *this = ::std::move(from);
  }

  inline GetPhotoRsp& operator=(const GetPhotoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhotoRsp& operator=(GetPhotoRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhotoRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhotoRsp* internal_default_instance() {
    return reinterpret_cast<const GetPhotoRsp*>(
               &_GetPhotoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetPhotoRsp& a, GetPhotoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhotoRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhotoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhotoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhotoRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhotoRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPhotoRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetPhotoRsp";
  }
  protected:
  explicit GetPhotoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastPublishNameFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
    kLastPublisherIdFieldNumber = 3,
  };
  // optional string last_publish_name = 4;
  bool has_last_publish_name() const;
  private:
  bool _internal_has_last_publish_name() const;
  public:
  void clear_last_publish_name();
  const std::string& last_publish_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_publish_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_publish_name();
  PROTOBUF_NODISCARD std::string* release_last_publish_name();
  void set_allocated_last_publish_name(std::string* last_publish_name);
  private:
  const std::string& _internal_last_publish_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_publish_name(const std::string& value);
  std::string* _internal_mutable_last_publish_name();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional uint32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // optional uint32 last_publisher_id = 3;
  bool has_last_publisher_id() const;
  private:
  bool _internal_has_last_publisher_id() const;
  public:
  void clear_last_publisher_id();
  uint32_t last_publisher_id() const;
  void set_last_publisher_id(uint32_t value);
  private:
  uint32_t _internal_last_publisher_id() const;
  void _internal_set_last_publisher_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.GetPhotoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_publish_name_;
    ::raybo::MsgHeader* header_;
    uint32_t ret_;
    uint32_t last_publisher_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CommonReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CommonReq) */ {
 public:
  inline CommonReq() : CommonReq(nullptr) {}
  ~CommonReq() override;
  explicit PROTOBUF_CONSTEXPR CommonReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonReq(const CommonReq& from);
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommonReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CommonReq";
  }
  protected:
  explicit CommonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRegReqFieldNumber = 2,
    kLoginReqFieldNumber = 3,
    kLogoutReqFieldNumber = 4,
    kAddFriendReqFieldNumber = 5,
    kDelFriendReqFieldNumber = 6,
    kPublishMessageReqFieldNumber = 7,
    kGetPhotoReqFieldNumber = 8,
    kGetMessageListReqFieldNumber = 9,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional .raybo.RegReq reg_req = 2;
  bool has_reg_req() const;
  private:
  bool _internal_has_reg_req() const;
  public:
  void clear_reg_req();
  const ::raybo::RegReq& reg_req() const;
  PROTOBUF_NODISCARD ::raybo::RegReq* release_reg_req();
  ::raybo::RegReq* mutable_reg_req();
  void set_allocated_reg_req(::raybo::RegReq* reg_req);
  private:
  const ::raybo::RegReq& _internal_reg_req() const;
  ::raybo::RegReq* _internal_mutable_reg_req();
  public:
  void unsafe_arena_set_allocated_reg_req(
      ::raybo::RegReq* reg_req);
  ::raybo::RegReq* unsafe_arena_release_reg_req();

  // optional .raybo.LoginReq login_req = 3;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::raybo::LoginReq& login_req() const;
  PROTOBUF_NODISCARD ::raybo::LoginReq* release_login_req();
  ::raybo::LoginReq* mutable_login_req();
  void set_allocated_login_req(::raybo::LoginReq* login_req);
  private:
  const ::raybo::LoginReq& _internal_login_req() const;
  ::raybo::LoginReq* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::raybo::LoginReq* login_req);
  ::raybo::LoginReq* unsafe_arena_release_login_req();

  // optional .raybo.LogoutReq logout_req = 4;
  bool has_logout_req() const;
  private:
  bool _internal_has_logout_req() const;
  public:
  void clear_logout_req();
  const ::raybo::LogoutReq& logout_req() const;
  PROTOBUF_NODISCARD ::raybo::LogoutReq* release_logout_req();
  ::raybo::LogoutReq* mutable_logout_req();
  void set_allocated_logout_req(::raybo::LogoutReq* logout_req);
  private:
  const ::raybo::LogoutReq& _internal_logout_req() const;
  ::raybo::LogoutReq* _internal_mutable_logout_req();
  public:
  void unsafe_arena_set_allocated_logout_req(
      ::raybo::LogoutReq* logout_req);
  ::raybo::LogoutReq* unsafe_arena_release_logout_req();

  // optional .raybo.AddFriendReq add_friend_req = 5;
  bool has_add_friend_req() const;
  private:
  bool _internal_has_add_friend_req() const;
  public:
  void clear_add_friend_req();
  const ::raybo::AddFriendReq& add_friend_req() const;
  PROTOBUF_NODISCARD ::raybo::AddFriendReq* release_add_friend_req();
  ::raybo::AddFriendReq* mutable_add_friend_req();
  void set_allocated_add_friend_req(::raybo::AddFriendReq* add_friend_req);
  private:
  const ::raybo::AddFriendReq& _internal_add_friend_req() const;
  ::raybo::AddFriendReq* _internal_mutable_add_friend_req();
  public:
  void unsafe_arena_set_allocated_add_friend_req(
      ::raybo::AddFriendReq* add_friend_req);
  ::raybo::AddFriendReq* unsafe_arena_release_add_friend_req();

  // optional .raybo.DelFriendReq del_friend_req = 6;
  bool has_del_friend_req() const;
  private:
  bool _internal_has_del_friend_req() const;
  public:
  void clear_del_friend_req();
  const ::raybo::DelFriendReq& del_friend_req() const;
  PROTOBUF_NODISCARD ::raybo::DelFriendReq* release_del_friend_req();
  ::raybo::DelFriendReq* mutable_del_friend_req();
  void set_allocated_del_friend_req(::raybo::DelFriendReq* del_friend_req);
  private:
  const ::raybo::DelFriendReq& _internal_del_friend_req() const;
  ::raybo::DelFriendReq* _internal_mutable_del_friend_req();
  public:
  void unsafe_arena_set_allocated_del_friend_req(
      ::raybo::DelFriendReq* del_friend_req);
  ::raybo::DelFriendReq* unsafe_arena_release_del_friend_req();

  // optional .raybo.PublishMessageReq publish_message_req = 7;
  bool has_publish_message_req() const;
  private:
  bool _internal_has_publish_message_req() const;
  public:
  void clear_publish_message_req();
  const ::raybo::PublishMessageReq& publish_message_req() const;
  PROTOBUF_NODISCARD ::raybo::PublishMessageReq* release_publish_message_req();
  ::raybo::PublishMessageReq* mutable_publish_message_req();
  void set_allocated_publish_message_req(::raybo::PublishMessageReq* publish_message_req);
  private:
  const ::raybo::PublishMessageReq& _internal_publish_message_req() const;
  ::raybo::PublishMessageReq* _internal_mutable_publish_message_req();
  public:
  void unsafe_arena_set_allocated_publish_message_req(
      ::raybo::PublishMessageReq* publish_message_req);
  ::raybo::PublishMessageReq* unsafe_arena_release_publish_message_req();

  // optional .raybo.GetPhotoReq get_photo_req = 8;
  bool has_get_photo_req() const;
  private:
  bool _internal_has_get_photo_req() const;
  public:
  void clear_get_photo_req();
  const ::raybo::GetPhotoReq& get_photo_req() const;
  PROTOBUF_NODISCARD ::raybo::GetPhotoReq* release_get_photo_req();
  ::raybo::GetPhotoReq* mutable_get_photo_req();
  void set_allocated_get_photo_req(::raybo::GetPhotoReq* get_photo_req);
  private:
  const ::raybo::GetPhotoReq& _internal_get_photo_req() const;
  ::raybo::GetPhotoReq* _internal_mutable_get_photo_req();
  public:
  void unsafe_arena_set_allocated_get_photo_req(
      ::raybo::GetPhotoReq* get_photo_req);
  ::raybo::GetPhotoReq* unsafe_arena_release_get_photo_req();

  // optional .raybo.GetMessageListReq get_message_list_req = 9;
  bool has_get_message_list_req() const;
  private:
  bool _internal_has_get_message_list_req() const;
  public:
  void clear_get_message_list_req();
  const ::raybo::GetMessageListReq& get_message_list_req() const;
  PROTOBUF_NODISCARD ::raybo::GetMessageListReq* release_get_message_list_req();
  ::raybo::GetMessageListReq* mutable_get_message_list_req();
  void set_allocated_get_message_list_req(::raybo::GetMessageListReq* get_message_list_req);
  private:
  const ::raybo::GetMessageListReq& _internal_get_message_list_req() const;
  ::raybo::GetMessageListReq* _internal_mutable_get_message_list_req();
  public:
  void unsafe_arena_set_allocated_get_message_list_req(
      ::raybo::GetMessageListReq* get_message_list_req);
  ::raybo::GetMessageListReq* unsafe_arena_release_get_message_list_req();

  // @@protoc_insertion_point(class_scope:raybo.CommonReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    ::raybo::RegReq* reg_req_;
    ::raybo::LoginReq* login_req_;
    ::raybo::LogoutReq* logout_req_;
    ::raybo::AddFriendReq* add_friend_req_;
    ::raybo::DelFriendReq* del_friend_req_;
    ::raybo::PublishMessageReq* publish_message_req_;
    ::raybo::GetPhotoReq* get_photo_req_;
    ::raybo::GetMessageListReq* get_message_list_req_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CommonRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CommonRsp) */ {
 public:
  inline CommonRsp() : CommonRsp(nullptr) {}
  ~CommonRsp() override;
  explicit PROTOBUF_CONSTEXPR CommonRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonRsp(const CommonRsp& from);
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommonRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CommonRsp";
  }
  protected:
  explicit CommonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRegRspFieldNumber = 2,
    kLoginRspFieldNumber = 3,
    kLogoutRspFieldNumber = 4,
    kAddFriendRspFieldNumber = 5,
    kDelFriendRspFieldNumber = 6,
    kPublishMessageRspFieldNumber = 7,
    kGetPhotoRspFieldNumber = 8,
    kGetMessageListRspFieldNumber = 9,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional .raybo.RegRsp reg_rsp = 2;
  bool has_reg_rsp() const;
  private:
  bool _internal_has_reg_rsp() const;
  public:
  void clear_reg_rsp();
  const ::raybo::RegRsp& reg_rsp() const;
  PROTOBUF_NODISCARD ::raybo::RegRsp* release_reg_rsp();
  ::raybo::RegRsp* mutable_reg_rsp();
  void set_allocated_reg_rsp(::raybo::RegRsp* reg_rsp);
  private:
  const ::raybo::RegRsp& _internal_reg_rsp() const;
  ::raybo::RegRsp* _internal_mutable_reg_rsp();
  public:
  void unsafe_arena_set_allocated_reg_rsp(
      ::raybo::RegRsp* reg_rsp);
  ::raybo::RegRsp* unsafe_arena_release_reg_rsp();

  // optional .raybo.LoginRsp login_rsp = 3;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::raybo::LoginRsp& login_rsp() const;
  PROTOBUF_NODISCARD ::raybo::LoginRsp* release_login_rsp();
  ::raybo::LoginRsp* mutable_login_rsp();
  void set_allocated_login_rsp(::raybo::LoginRsp* login_rsp);
  private:
  const ::raybo::LoginRsp& _internal_login_rsp() const;
  ::raybo::LoginRsp* _internal_mutable_login_rsp();
  public:
  void unsafe_arena_set_allocated_login_rsp(
      ::raybo::LoginRsp* login_rsp);
  ::raybo::LoginRsp* unsafe_arena_release_login_rsp();

  // optional .raybo.LogoutRsp logout_rsp = 4;
  bool has_logout_rsp() const;
  private:
  bool _internal_has_logout_rsp() const;
  public:
  void clear_logout_rsp();
  const ::raybo::LogoutRsp& logout_rsp() const;
  PROTOBUF_NODISCARD ::raybo::LogoutRsp* release_logout_rsp();
  ::raybo::LogoutRsp* mutable_logout_rsp();
  void set_allocated_logout_rsp(::raybo::LogoutRsp* logout_rsp);
  private:
  const ::raybo::LogoutRsp& _internal_logout_rsp() const;
  ::raybo::LogoutRsp* _internal_mutable_logout_rsp();
  public:
  void unsafe_arena_set_allocated_logout_rsp(
      ::raybo::LogoutRsp* logout_rsp);
  ::raybo::LogoutRsp* unsafe_arena_release_logout_rsp();

  // optional .raybo.AddFriendRsp add_friend_rsp = 5;
  bool has_add_friend_rsp() const;
  private:
  bool _internal_has_add_friend_rsp() const;
  public:
  void clear_add_friend_rsp();
  const ::raybo::AddFriendRsp& add_friend_rsp() const;
  PROTOBUF_NODISCARD ::raybo::AddFriendRsp* release_add_friend_rsp();
  ::raybo::AddFriendRsp* mutable_add_friend_rsp();
  void set_allocated_add_friend_rsp(::raybo::AddFriendRsp* add_friend_rsp);
  private:
  const ::raybo::AddFriendRsp& _internal_add_friend_rsp() const;
  ::raybo::AddFriendRsp* _internal_mutable_add_friend_rsp();
  public:
  void unsafe_arena_set_allocated_add_friend_rsp(
      ::raybo::AddFriendRsp* add_friend_rsp);
  ::raybo::AddFriendRsp* unsafe_arena_release_add_friend_rsp();

  // optional .raybo.DelFriendRsp del_friend_rsp = 6;
  bool has_del_friend_rsp() const;
  private:
  bool _internal_has_del_friend_rsp() const;
  public:
  void clear_del_friend_rsp();
  const ::raybo::DelFriendRsp& del_friend_rsp() const;
  PROTOBUF_NODISCARD ::raybo::DelFriendRsp* release_del_friend_rsp();
  ::raybo::DelFriendRsp* mutable_del_friend_rsp();
  void set_allocated_del_friend_rsp(::raybo::DelFriendRsp* del_friend_rsp);
  private:
  const ::raybo::DelFriendRsp& _internal_del_friend_rsp() const;
  ::raybo::DelFriendRsp* _internal_mutable_del_friend_rsp();
  public:
  void unsafe_arena_set_allocated_del_friend_rsp(
      ::raybo::DelFriendRsp* del_friend_rsp);
  ::raybo::DelFriendRsp* unsafe_arena_release_del_friend_rsp();

  // optional .raybo.PublishMessageRsp publish_message_rsp = 7;
  bool has_publish_message_rsp() const;
  private:
  bool _internal_has_publish_message_rsp() const;
  public:
  void clear_publish_message_rsp();
  const ::raybo::PublishMessageRsp& publish_message_rsp() const;
  PROTOBUF_NODISCARD ::raybo::PublishMessageRsp* release_publish_message_rsp();
  ::raybo::PublishMessageRsp* mutable_publish_message_rsp();
  void set_allocated_publish_message_rsp(::raybo::PublishMessageRsp* publish_message_rsp);
  private:
  const ::raybo::PublishMessageRsp& _internal_publish_message_rsp() const;
  ::raybo::PublishMessageRsp* _internal_mutable_publish_message_rsp();
  public:
  void unsafe_arena_set_allocated_publish_message_rsp(
      ::raybo::PublishMessageRsp* publish_message_rsp);
  ::raybo::PublishMessageRsp* unsafe_arena_release_publish_message_rsp();

  // optional .raybo.GetPhotoRsp get_photo_rsp = 8;
  bool has_get_photo_rsp() const;
  private:
  bool _internal_has_get_photo_rsp() const;
  public:
  void clear_get_photo_rsp();
  const ::raybo::GetPhotoRsp& get_photo_rsp() const;
  PROTOBUF_NODISCARD ::raybo::GetPhotoRsp* release_get_photo_rsp();
  ::raybo::GetPhotoRsp* mutable_get_photo_rsp();
  void set_allocated_get_photo_rsp(::raybo::GetPhotoRsp* get_photo_rsp);
  private:
  const ::raybo::GetPhotoRsp& _internal_get_photo_rsp() const;
  ::raybo::GetPhotoRsp* _internal_mutable_get_photo_rsp();
  public:
  void unsafe_arena_set_allocated_get_photo_rsp(
      ::raybo::GetPhotoRsp* get_photo_rsp);
  ::raybo::GetPhotoRsp* unsafe_arena_release_get_photo_rsp();

  // optional .raybo.GetMessageListRsp get_message_list_rsp = 9;
  bool has_get_message_list_rsp() const;
  private:
  bool _internal_has_get_message_list_rsp() const;
  public:
  void clear_get_message_list_rsp();
  const ::raybo::GetMessageListRsp& get_message_list_rsp() const;
  PROTOBUF_NODISCARD ::raybo::GetMessageListRsp* release_get_message_list_rsp();
  ::raybo::GetMessageListRsp* mutable_get_message_list_rsp();
  void set_allocated_get_message_list_rsp(::raybo::GetMessageListRsp* get_message_list_rsp);
  private:
  const ::raybo::GetMessageListRsp& _internal_get_message_list_rsp() const;
  ::raybo::GetMessageListRsp* _internal_mutable_get_message_list_rsp();
  public:
  void unsafe_arena_set_allocated_get_message_list_rsp(
      ::raybo::GetMessageListRsp* get_message_list_rsp);
  ::raybo::GetMessageListRsp* unsafe_arena_release_get_message_list_rsp();

  // @@protoc_insertion_point(class_scope:raybo.CommonRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    ::raybo::RegRsp* reg_rsp_;
    ::raybo::LoginRsp* login_rsp_;
    ::raybo::LogoutRsp* logout_rsp_;
    ::raybo::AddFriendRsp* add_friend_rsp_;
    ::raybo::DelFriendRsp* del_friend_rsp_;
    ::raybo::PublishMessageRsp* publish_message_rsp_;
    ::raybo::GetPhotoRsp* get_photo_rsp_;
    ::raybo::GetMessageListRsp* get_message_list_rsp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetUserIdByNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetUserIdByNameReq) */ {
 public:
  inline GetUserIdByNameReq() : GetUserIdByNameReq(nullptr) {}
  ~GetUserIdByNameReq() override;
  explicit PROTOBUF_CONSTEXPR GetUserIdByNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserIdByNameReq(const GetUserIdByNameReq& from);
  GetUserIdByNameReq(GetUserIdByNameReq&& from) noexcept
    : GetUserIdByNameReq() {
    *this = ::std::move(from);
  }

  inline GetUserIdByNameReq& operator=(const GetUserIdByNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserIdByNameReq& operator=(GetUserIdByNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserIdByNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserIdByNameReq* internal_default_instance() {
    return reinterpret_cast<const GetUserIdByNameReq*>(
               &_GetUserIdByNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetUserIdByNameReq& a, GetUserIdByNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserIdByNameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserIdByNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserIdByNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserIdByNameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserIdByNameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserIdByNameReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserIdByNameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetUserIdByNameReq";
  }
  protected:
  explicit GetUserIdByNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // optional string user_name = 2;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:raybo.GetUserIdByNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::raybo::MsgHeader* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetUserIdByNameRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.GetUserIdByNameRsp) */ {
 public:
  inline GetUserIdByNameRsp() : GetUserIdByNameRsp(nullptr) {}
  ~GetUserIdByNameRsp() override;
  explicit PROTOBUF_CONSTEXPR GetUserIdByNameRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserIdByNameRsp(const GetUserIdByNameRsp& from);
  GetUserIdByNameRsp(GetUserIdByNameRsp&& from) noexcept
    : GetUserIdByNameRsp() {
    *this = ::std::move(from);
  }

  inline GetUserIdByNameRsp& operator=(const GetUserIdByNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserIdByNameRsp& operator=(GetUserIdByNameRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserIdByNameRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserIdByNameRsp* internal_default_instance() {
    return reinterpret_cast<const GetUserIdByNameRsp*>(
               &_GetUserIdByNameRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetUserIdByNameRsp& a, GetUserIdByNameRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserIdByNameRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserIdByNameRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserIdByNameRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserIdByNameRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserIdByNameRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserIdByNameRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserIdByNameRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.GetUserIdByNameRsp";
  }
  protected:
  explicit GetUserIdByNameRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.GetUserIdByNameRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    int32_t ret_;
    int32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CreateUserReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CreateUserReq) */ {
 public:
  inline CreateUserReq() : CreateUserReq(nullptr) {}
  ~CreateUserReq() override;
  explicit PROTOBUF_CONSTEXPR CreateUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserReq(const CreateUserReq& from);
  CreateUserReq(CreateUserReq&& from) noexcept
    : CreateUserReq() {
    *this = ::std::move(from);
  }

  inline CreateUserReq& operator=(const CreateUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserReq& operator=(CreateUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserReq* internal_default_instance() {
    return reinterpret_cast<const CreateUserReq*>(
               &_CreateUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateUserReq& a, CreateUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CreateUserReq";
  }
  protected:
  explicit CreateUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kFromFieldNumber = 4,
  };
  // optional string user_name = 2;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 from = 4;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  int32_t from() const;
  void set_from(int32_t value);
  private:
  int32_t _internal_from() const;
  void _internal_set_from(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.CreateUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::raybo::MsgHeader* header_;
    int32_t from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CreateUserRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CreateUserRsp) */ {
 public:
  inline CreateUserRsp() : CreateUserRsp(nullptr) {}
  ~CreateUserRsp() override;
  explicit PROTOBUF_CONSTEXPR CreateUserRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRsp(const CreateUserRsp& from);
  CreateUserRsp(CreateUserRsp&& from) noexcept
    : CreateUserRsp() {
    *this = ::std::move(from);
  }

  inline CreateUserRsp& operator=(const CreateUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRsp& operator=(CreateUserRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRsp* internal_default_instance() {
    return reinterpret_cast<const CreateUserRsp*>(
               &_CreateUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreateUserRsp& a, CreateUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CreateUserRsp";
  }
  protected:
  explicit CreateUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.CreateUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    int32_t ret_;
    int32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginCheckReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LoginCheckReq) */ {
 public:
  inline LoginCheckReq() : LoginCheckReq(nullptr) {}
  ~LoginCheckReq() override;
  explicit PROTOBUF_CONSTEXPR LoginCheckReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginCheckReq(const LoginCheckReq& from);
  LoginCheckReq(LoginCheckReq&& from) noexcept
    : LoginCheckReq() {
    *this = ::std::move(from);
  }

  inline LoginCheckReq& operator=(const LoginCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginCheckReq& operator=(LoginCheckReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginCheckReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginCheckReq* internal_default_instance() {
    return reinterpret_cast<const LoginCheckReq*>(
               &_LoginCheckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LoginCheckReq& a, LoginCheckReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginCheckReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginCheckReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginCheckReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginCheckReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginCheckReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginCheckReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginCheckReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LoginCheckReq";
  }
  protected:
  explicit LoginCheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // optional string user_name = 2;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:raybo.LoginCheckReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::raybo::MsgHeader* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginCheckRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.LoginCheckRsp) */ {
 public:
  inline LoginCheckRsp() : LoginCheckRsp(nullptr) {}
  ~LoginCheckRsp() override;
  explicit PROTOBUF_CONSTEXPR LoginCheckRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginCheckRsp(const LoginCheckRsp& from);
  LoginCheckRsp(LoginCheckRsp&& from) noexcept
    : LoginCheckRsp() {
    *this = ::std::move(from);
  }

  inline LoginCheckRsp& operator=(const LoginCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginCheckRsp& operator=(LoginCheckRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginCheckRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginCheckRsp* internal_default_instance() {
    return reinterpret_cast<const LoginCheckRsp*>(
               &_LoginCheckRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LoginCheckRsp& a, LoginCheckRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginCheckRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginCheckRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginCheckRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginCheckRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginCheckRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginCheckRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginCheckRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.LoginCheckRsp";
  }
  protected:
  explicit LoginCheckRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.LoginCheckRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    int32_t ret_;
    int32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CheckUserExistReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CheckUserExistReq) */ {
 public:
  inline CheckUserExistReq() : CheckUserExistReq(nullptr) {}
  ~CheckUserExistReq() override;
  explicit PROTOBUF_CONSTEXPR CheckUserExistReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserExistReq(const CheckUserExistReq& from);
  CheckUserExistReq(CheckUserExistReq&& from) noexcept
    : CheckUserExistReq() {
    *this = ::std::move(from);
  }

  inline CheckUserExistReq& operator=(const CheckUserExistReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserExistReq& operator=(CheckUserExistReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserExistReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserExistReq* internal_default_instance() {
    return reinterpret_cast<const CheckUserExistReq*>(
               &_CheckUserExistReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CheckUserExistReq& a, CheckUserExistReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserExistReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserExistReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckUserExistReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckUserExistReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserExistReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserExistReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserExistReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CheckUserExistReq";
  }
  protected:
  explicit CheckUserExistReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.CheckUserExistReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    int32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class CheckUserExistRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.CheckUserExistRsp) */ {
 public:
  inline CheckUserExistRsp() : CheckUserExistRsp(nullptr) {}
  ~CheckUserExistRsp() override;
  explicit PROTOBUF_CONSTEXPR CheckUserExistRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckUserExistRsp(const CheckUserExistRsp& from);
  CheckUserExistRsp(CheckUserExistRsp&& from) noexcept
    : CheckUserExistRsp() {
    *this = ::std::move(from);
  }

  inline CheckUserExistRsp& operator=(const CheckUserExistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckUserExistRsp& operator=(CheckUserExistRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckUserExistRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckUserExistRsp* internal_default_instance() {
    return reinterpret_cast<const CheckUserExistRsp*>(
               &_CheckUserExistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CheckUserExistRsp& a, CheckUserExistRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckUserExistRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckUserExistRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckUserExistRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckUserExistRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckUserExistRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckUserExistRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckUserExistRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.CheckUserExistRsp";
  }
  protected:
  explicit CheckUserExistRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional int32 ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raybo.CheckUserExistRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class ServerToUserReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.ServerToUserReq) */ {
 public:
  inline ServerToUserReq() : ServerToUserReq(nullptr) {}
  ~ServerToUserReq() override;
  explicit PROTOBUF_CONSTEXPR ServerToUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerToUserReq(const ServerToUserReq& from);
  ServerToUserReq(ServerToUserReq&& from) noexcept
    : ServerToUserReq() {
    *this = ::std::move(from);
  }

  inline ServerToUserReq& operator=(const ServerToUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToUserReq& operator=(ServerToUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerToUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerToUserReq* internal_default_instance() {
    return reinterpret_cast<const ServerToUserReq*>(
               &_ServerToUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ServerToUserReq& a, ServerToUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToUserReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerToUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerToUserReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerToUserReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerToUserReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToUserReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.ServerToUserReq";
  }
  protected:
  explicit ServerToUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGetUserIdFieldNumber = 2,
    kCreateUserFieldNumber = 3,
    kLoginCheckFieldNumber = 4,
    kCheckUserExistFieldNumber = 5,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional .raybo.GetUserIdByNameReq get_user_id = 2;
  bool has_get_user_id() const;
  private:
  bool _internal_has_get_user_id() const;
  public:
  void clear_get_user_id();
  const ::raybo::GetUserIdByNameReq& get_user_id() const;
  PROTOBUF_NODISCARD ::raybo::GetUserIdByNameReq* release_get_user_id();
  ::raybo::GetUserIdByNameReq* mutable_get_user_id();
  void set_allocated_get_user_id(::raybo::GetUserIdByNameReq* get_user_id);
  private:
  const ::raybo::GetUserIdByNameReq& _internal_get_user_id() const;
  ::raybo::GetUserIdByNameReq* _internal_mutable_get_user_id();
  public:
  void unsafe_arena_set_allocated_get_user_id(
      ::raybo::GetUserIdByNameReq* get_user_id);
  ::raybo::GetUserIdByNameReq* unsafe_arena_release_get_user_id();

  // optional .raybo.CreateUserReq create_user = 3;
  bool has_create_user() const;
  private:
  bool _internal_has_create_user() const;
  public:
  void clear_create_user();
  const ::raybo::CreateUserReq& create_user() const;
  PROTOBUF_NODISCARD ::raybo::CreateUserReq* release_create_user();
  ::raybo::CreateUserReq* mutable_create_user();
  void set_allocated_create_user(::raybo::CreateUserReq* create_user);
  private:
  const ::raybo::CreateUserReq& _internal_create_user() const;
  ::raybo::CreateUserReq* _internal_mutable_create_user();
  public:
  void unsafe_arena_set_allocated_create_user(
      ::raybo::CreateUserReq* create_user);
  ::raybo::CreateUserReq* unsafe_arena_release_create_user();

  // optional .raybo.LoginCheckReq login_check = 4;
  bool has_login_check() const;
  private:
  bool _internal_has_login_check() const;
  public:
  void clear_login_check();
  const ::raybo::LoginCheckReq& login_check() const;
  PROTOBUF_NODISCARD ::raybo::LoginCheckReq* release_login_check();
  ::raybo::LoginCheckReq* mutable_login_check();
  void set_allocated_login_check(::raybo::LoginCheckReq* login_check);
  private:
  const ::raybo::LoginCheckReq& _internal_login_check() const;
  ::raybo::LoginCheckReq* _internal_mutable_login_check();
  public:
  void unsafe_arena_set_allocated_login_check(
      ::raybo::LoginCheckReq* login_check);
  ::raybo::LoginCheckReq* unsafe_arena_release_login_check();

  // optional .raybo.CheckUserExistReq check_user_exist = 5;
  bool has_check_user_exist() const;
  private:
  bool _internal_has_check_user_exist() const;
  public:
  void clear_check_user_exist();
  const ::raybo::CheckUserExistReq& check_user_exist() const;
  PROTOBUF_NODISCARD ::raybo::CheckUserExistReq* release_check_user_exist();
  ::raybo::CheckUserExistReq* mutable_check_user_exist();
  void set_allocated_check_user_exist(::raybo::CheckUserExistReq* check_user_exist);
  private:
  const ::raybo::CheckUserExistReq& _internal_check_user_exist() const;
  ::raybo::CheckUserExistReq* _internal_mutable_check_user_exist();
  public:
  void unsafe_arena_set_allocated_check_user_exist(
      ::raybo::CheckUserExistReq* check_user_exist);
  ::raybo::CheckUserExistReq* unsafe_arena_release_check_user_exist();

  // @@protoc_insertion_point(class_scope:raybo.ServerToUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    ::raybo::GetUserIdByNameReq* get_user_id_;
    ::raybo::CreateUserReq* create_user_;
    ::raybo::LoginCheckReq* login_check_;
    ::raybo::CheckUserExistReq* check_user_exist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class UserToServerRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raybo.UserToServerRsp) */ {
 public:
  inline UserToServerRsp() : UserToServerRsp(nullptr) {}
  ~UserToServerRsp() override;
  explicit PROTOBUF_CONSTEXPR UserToServerRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserToServerRsp(const UserToServerRsp& from);
  UserToServerRsp(UserToServerRsp&& from) noexcept
    : UserToServerRsp() {
    *this = ::std::move(from);
  }

  inline UserToServerRsp& operator=(const UserToServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToServerRsp& operator=(UserToServerRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserToServerRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserToServerRsp* internal_default_instance() {
    return reinterpret_cast<const UserToServerRsp*>(
               &_UserToServerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UserToServerRsp& a, UserToServerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToServerRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToServerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserToServerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserToServerRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserToServerRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserToServerRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToServerRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raybo.UserToServerRsp";
  }
  protected:
  explicit UserToServerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGetUserIdFieldNumber = 2,
    kCreateUserFieldNumber = 3,
    kLoginCheckFieldNumber = 4,
    kCheckUserExistFieldNumber = 5,
  };
  // optional .raybo.MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::raybo::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::raybo::MsgHeader* release_header();
  ::raybo::MsgHeader* mutable_header();
  void set_allocated_header(::raybo::MsgHeader* header);
  private:
  const ::raybo::MsgHeader& _internal_header() const;
  ::raybo::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::raybo::MsgHeader* header);
  ::raybo::MsgHeader* unsafe_arena_release_header();

  // optional .raybo.GetUserIdByNameRsp get_user_id = 2;
  bool has_get_user_id() const;
  private:
  bool _internal_has_get_user_id() const;
  public:
  void clear_get_user_id();
  const ::raybo::GetUserIdByNameRsp& get_user_id() const;
  PROTOBUF_NODISCARD ::raybo::GetUserIdByNameRsp* release_get_user_id();
  ::raybo::GetUserIdByNameRsp* mutable_get_user_id();
  void set_allocated_get_user_id(::raybo::GetUserIdByNameRsp* get_user_id);
  private:
  const ::raybo::GetUserIdByNameRsp& _internal_get_user_id() const;
  ::raybo::GetUserIdByNameRsp* _internal_mutable_get_user_id();
  public:
  void unsafe_arena_set_allocated_get_user_id(
      ::raybo::GetUserIdByNameRsp* get_user_id);
  ::raybo::GetUserIdByNameRsp* unsafe_arena_release_get_user_id();

  // optional .raybo.CreateUserRsp create_user = 3;
  bool has_create_user() const;
  private:
  bool _internal_has_create_user() const;
  public:
  void clear_create_user();
  const ::raybo::CreateUserRsp& create_user() const;
  PROTOBUF_NODISCARD ::raybo::CreateUserRsp* release_create_user();
  ::raybo::CreateUserRsp* mutable_create_user();
  void set_allocated_create_user(::raybo::CreateUserRsp* create_user);
  private:
  const ::raybo::CreateUserRsp& _internal_create_user() const;
  ::raybo::CreateUserRsp* _internal_mutable_create_user();
  public:
  void unsafe_arena_set_allocated_create_user(
      ::raybo::CreateUserRsp* create_user);
  ::raybo::CreateUserRsp* unsafe_arena_release_create_user();

  // optional .raybo.LoginCheckRsp login_check = 4;
  bool has_login_check() const;
  private:
  bool _internal_has_login_check() const;
  public:
  void clear_login_check();
  const ::raybo::LoginCheckRsp& login_check() const;
  PROTOBUF_NODISCARD ::raybo::LoginCheckRsp* release_login_check();
  ::raybo::LoginCheckRsp* mutable_login_check();
  void set_allocated_login_check(::raybo::LoginCheckRsp* login_check);
  private:
  const ::raybo::LoginCheckRsp& _internal_login_check() const;
  ::raybo::LoginCheckRsp* _internal_mutable_login_check();
  public:
  void unsafe_arena_set_allocated_login_check(
      ::raybo::LoginCheckRsp* login_check);
  ::raybo::LoginCheckRsp* unsafe_arena_release_login_check();

  // optional .raybo.CheckUserExistRsp check_user_exist = 5;
  bool has_check_user_exist() const;
  private:
  bool _internal_has_check_user_exist() const;
  public:
  void clear_check_user_exist();
  const ::raybo::CheckUserExistRsp& check_user_exist() const;
  PROTOBUF_NODISCARD ::raybo::CheckUserExistRsp* release_check_user_exist();
  ::raybo::CheckUserExistRsp* mutable_check_user_exist();
  void set_allocated_check_user_exist(::raybo::CheckUserExistRsp* check_user_exist);
  private:
  const ::raybo::CheckUserExistRsp& _internal_check_user_exist() const;
  ::raybo::CheckUserExistRsp* _internal_mutable_check_user_exist();
  public:
  void unsafe_arena_set_allocated_check_user_exist(
      ::raybo::CheckUserExistRsp* check_user_exist);
  ::raybo::CheckUserExistRsp* unsafe_arena_release_check_user_exist();

  // @@protoc_insertion_point(class_scope:raybo.UserToServerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::raybo::MsgHeader* header_;
    ::raybo::GetUserIdByNameRsp* get_user_id_;
    ::raybo::CreateUserRsp* create_user_;
    ::raybo::LoginCheckRsp* login_check_;
    ::raybo::CheckUserExistRsp* check_user_exist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader

// optional uint32 ver = 1;
inline bool MsgHeader::_internal_has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MsgHeader::has_ver() const {
  return _internal_has_ver();
}
inline void MsgHeader::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t MsgHeader::_internal_ver() const {
  return _impl_.ver_;
}
inline uint32_t MsgHeader::ver() const {
  // @@protoc_insertion_point(field_get:raybo.MsgHeader.ver)
  return _internal_ver();
}
inline void MsgHeader::_internal_set_ver(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ver_ = value;
}
inline void MsgHeader::set_ver(uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:raybo.MsgHeader.ver)
}

// optional uint32 cmd_type = 2;
inline bool MsgHeader::_internal_has_cmd_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgHeader::has_cmd_type() const {
  return _internal_has_cmd_type();
}
inline void MsgHeader::clear_cmd_type() {
  _impl_.cmd_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MsgHeader::_internal_cmd_type() const {
  return _impl_.cmd_type_;
}
inline uint32_t MsgHeader::cmd_type() const {
  // @@protoc_insertion_point(field_get:raybo.MsgHeader.cmd_type)
  return _internal_cmd_type();
}
inline void MsgHeader::_internal_set_cmd_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_type_ = value;
}
inline void MsgHeader::set_cmd_type(uint32_t value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:raybo.MsgHeader.cmd_type)
}

// -------------------------------------------------------------------

// RegReq

// optional .raybo.MsgHeader header = 1;
inline bool RegReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RegReq::has_header() const {
  return _internal_has_header();
}
inline void RegReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::MsgHeader& RegReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& RegReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.RegReq.header)
  return _internal_header();
}
inline void RegReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.RegReq.header)
}
inline ::raybo::MsgHeader* RegReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* RegReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.RegReq.header)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* RegReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* RegReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.RegReq.header)
  return _msg;
}
inline void RegReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.RegReq.header)
}

// optional string user_name = 3;
inline bool RegReq::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void RegReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegReq::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.RegReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.RegReq.user_name)
}
inline std::string* RegReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.RegReq.user_name)
  return _s;
}
inline const std::string& RegReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void RegReq::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegReq::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegReq::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.RegReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.RegReq.user_name)
}

// optional string password = 4;
inline bool RegReq::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegReq::has_password() const {
  return _internal_has_password();
}
inline void RegReq::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegReq::password() const {
  // @@protoc_insertion_point(field_get:raybo.RegReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegReq::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.RegReq.password)
}
inline std::string* RegReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:raybo.RegReq.password)
  return _s;
}
inline const std::string& RegReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void RegReq::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* RegReq::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* RegReq::release_password() {
  // @@protoc_insertion_point(field_release:raybo.RegReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.RegReq.password)
}

// optional uint32 from = 5;
inline bool RegReq::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegReq::has_from() const {
  return _internal_has_from();
}
inline void RegReq::clear_from() {
  _impl_.from_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RegReq::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t RegReq::from() const {
  // @@protoc_insertion_point(field_get:raybo.RegReq.from)
  return _internal_from();
}
inline void RegReq::_internal_set_from(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.from_ = value;
}
inline void RegReq::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:raybo.RegReq.from)
}

// -------------------------------------------------------------------

// RegRsp

// optional .raybo.MsgHeader header = 1;
inline bool RegRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool RegRsp::has_header() const {
  return _internal_has_header();
}
inline void RegRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& RegRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& RegRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.RegRsp.header)
  return _internal_header();
}
inline void RegRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.RegRsp.header)
}
inline ::raybo::MsgHeader* RegRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* RegRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.RegRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* RegRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* RegRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.RegRsp.header)
  return _msg;
}
inline void RegRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.RegRsp.header)
}

// optional uint32 ret = 3;
inline bool RegRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegRsp::has_ret() const {
  return _internal_has_ret();
}
inline void RegRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RegRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t RegRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.RegRsp.ret)
  return _internal_ret();
}
inline void RegRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void RegRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.RegRsp.ret)
}

// optional uint32 user_id = 4;
inline bool RegRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void RegRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RegRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t RegRsp::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.RegRsp.user_id)
  return _internal_user_id();
}
inline void RegRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void RegRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.RegRsp.user_id)
}

// -------------------------------------------------------------------

// LoginReq

// optional uint32 ver = 1;
inline bool LoginReq::_internal_has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReq::has_ver() const {
  return _internal_has_ver();
}
inline void LoginReq::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LoginReq::_internal_ver() const {
  return _impl_.ver_;
}
inline uint32_t LoginReq::ver() const {
  // @@protoc_insertion_point(field_get:raybo.LoginReq.ver)
  return _internal_ver();
}
inline void LoginReq::_internal_set_ver(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ver_ = value;
}
inline void LoginReq::set_ver(uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:raybo.LoginReq.ver)
}

// optional uint32 cmd_type = 2;
inline bool LoginReq::_internal_has_cmd_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReq::has_cmd_type() const {
  return _internal_has_cmd_type();
}
inline void LoginReq::clear_cmd_type() {
  _impl_.cmd_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LoginReq::_internal_cmd_type() const {
  return _impl_.cmd_type_;
}
inline uint32_t LoginReq::cmd_type() const {
  // @@protoc_insertion_point(field_get:raybo.LoginReq.cmd_type)
  return _internal_cmd_type();
}
inline void LoginReq::_internal_set_cmd_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cmd_type_ = value;
}
inline void LoginReq::set_cmd_type(uint32_t value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:raybo.LoginReq.cmd_type)
}

// optional string user_name = 3;
inline bool LoginReq::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void LoginReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.LoginReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.LoginReq.user_name)
}
inline std::string* LoginReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.LoginReq.user_name)
  return _s;
}
inline const std::string& LoginReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void LoginReq::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.LoginReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginReq.user_name)
}

// optional string password = 4;
inline bool LoginReq::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReq::has_password() const {
  return _internal_has_password();
}
inline void LoginReq::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:raybo.LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:raybo.LoginReq.password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:raybo.LoginReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRsp

// optional uint32 ver = 1;
inline bool LoginRsp::_internal_has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginRsp::has_ver() const {
  return _internal_has_ver();
}
inline void LoginRsp::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LoginRsp::_internal_ver() const {
  return _impl_.ver_;
}
inline uint32_t LoginRsp::ver() const {
  // @@protoc_insertion_point(field_get:raybo.LoginRsp.ver)
  return _internal_ver();
}
inline void LoginRsp::_internal_set_ver(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ver_ = value;
}
inline void LoginRsp::set_ver(uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:raybo.LoginRsp.ver)
}

// optional uint32 cmd_type = 2;
inline bool LoginRsp::_internal_has_cmd_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginRsp::has_cmd_type() const {
  return _internal_has_cmd_type();
}
inline void LoginRsp::clear_cmd_type() {
  _impl_.cmd_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LoginRsp::_internal_cmd_type() const {
  return _impl_.cmd_type_;
}
inline uint32_t LoginRsp::cmd_type() const {
  // @@protoc_insertion_point(field_get:raybo.LoginRsp.cmd_type)
  return _internal_cmd_type();
}
inline void LoginRsp::_internal_set_cmd_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_type_ = value;
}
inline void LoginRsp::set_cmd_type(uint32_t value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:raybo.LoginRsp.cmd_type)
}

// optional uint32 ret = 3;
inline bool LoginRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginRsp::has_ret() const {
  return _internal_has_ret();
}
inline void LoginRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LoginRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t LoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.LoginRsp.ret)
  return _internal_ret();
}
inline void LoginRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}
inline void LoginRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.LoginRsp.ret)
}

// optional uint32 user_id = 4;
inline bool LoginRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void LoginRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LoginRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t LoginRsp::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.LoginRsp.user_id)
  return _internal_user_id();
}
inline void LoginRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_id_ = value;
}
inline void LoginRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.LoginRsp.user_id)
}

// -------------------------------------------------------------------

// LogoutReq

// optional uint32 user_id = 3;
inline bool LogoutReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogoutReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void LogoutReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LogoutReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t LogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.LogoutReq.user_id)
  return _internal_user_id();
}
inline void LogoutReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_id_ = value;
}
inline void LogoutReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.LogoutReq.user_id)
}

// -------------------------------------------------------------------

// LogoutRsp

// optional uint32 ret = 2;
inline bool LogoutRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogoutRsp::has_ret() const {
  return _internal_has_ret();
}
inline void LogoutRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LogoutRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t LogoutRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.LogoutRsp.ret)
  return _internal_ret();
}
inline void LogoutRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ret_ = value;
}
inline void LogoutRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.LogoutRsp.ret)
}

// -------------------------------------------------------------------

// AddFriendReq

// optional .raybo.MsgHeader header = 1;
inline bool AddFriendReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool AddFriendReq::has_header() const {
  return _internal_has_header();
}
inline void AddFriendReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& AddFriendReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& AddFriendReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.AddFriendReq.header)
  return _internal_header();
}
inline void AddFriendReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.AddFriendReq.header)
}
inline ::raybo::MsgHeader* AddFriendReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* AddFriendReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.AddFriendReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* AddFriendReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* AddFriendReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.AddFriendReq.header)
  return _msg;
}
inline void AddFriendReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.AddFriendReq.header)
}

// optional uint32 user_id = 2;
inline bool AddFriendReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddFriendReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void AddFriendReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t AddFriendReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t AddFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.AddFriendReq.user_id)
  return _internal_user_id();
}
inline void AddFriendReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void AddFriendReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.AddFriendReq.user_id)
}

// optional uint32 other_id = 3;
inline bool AddFriendReq::_internal_has_other_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddFriendReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void AddFriendReq::clear_other_id() {
  _impl_.other_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t AddFriendReq::_internal_other_id() const {
  return _impl_.other_id_;
}
inline uint32_t AddFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:raybo.AddFriendReq.other_id)
  return _internal_other_id();
}
inline void AddFriendReq::_internal_set_other_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.other_id_ = value;
}
inline void AddFriendReq::set_other_id(uint32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:raybo.AddFriendReq.other_id)
}

// -------------------------------------------------------------------

// AddFriendRsp

// optional .raybo.MsgHeader header = 1;
inline bool AddFriendRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool AddFriendRsp::has_header() const {
  return _internal_has_header();
}
inline void AddFriendRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& AddFriendRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& AddFriendRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.AddFriendRsp.header)
  return _internal_header();
}
inline void AddFriendRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.AddFriendRsp.header)
}
inline ::raybo::MsgHeader* AddFriendRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* AddFriendRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.AddFriendRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* AddFriendRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* AddFriendRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.AddFriendRsp.header)
  return _msg;
}
inline void AddFriendRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.AddFriendRsp.header)
}

// optional uint32 ret = 2;
inline bool AddFriendRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddFriendRsp::has_ret() const {
  return _internal_has_ret();
}
inline void AddFriendRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t AddFriendRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t AddFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.AddFriendRsp.ret)
  return _internal_ret();
}
inline void AddFriendRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void AddFriendRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.AddFriendRsp.ret)
}

// -------------------------------------------------------------------

// DelFriendReq

// optional .raybo.MsgHeader header = 1;
inline bool DelFriendReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool DelFriendReq::has_header() const {
  return _internal_has_header();
}
inline void DelFriendReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& DelFriendReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& DelFriendReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.DelFriendReq.header)
  return _internal_header();
}
inline void DelFriendReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.DelFriendReq.header)
}
inline ::raybo::MsgHeader* DelFriendReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* DelFriendReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.DelFriendReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* DelFriendReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* DelFriendReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.DelFriendReq.header)
  return _msg;
}
inline void DelFriendReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.DelFriendReq.header)
}

// optional uint32 user_id = 2;
inline bool DelFriendReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelFriendReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void DelFriendReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DelFriendReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t DelFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.DelFriendReq.user_id)
  return _internal_user_id();
}
inline void DelFriendReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void DelFriendReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.DelFriendReq.user_id)
}

// optional uint32 other_id = 3;
inline bool DelFriendReq::_internal_has_other_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelFriendReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void DelFriendReq::clear_other_id() {
  _impl_.other_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DelFriendReq::_internal_other_id() const {
  return _impl_.other_id_;
}
inline uint32_t DelFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:raybo.DelFriendReq.other_id)
  return _internal_other_id();
}
inline void DelFriendReq::_internal_set_other_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.other_id_ = value;
}
inline void DelFriendReq::set_other_id(uint32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:raybo.DelFriendReq.other_id)
}

// -------------------------------------------------------------------

// DelFriendRsp

// optional .raybo.MsgHeader header = 1;
inline bool DelFriendRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool DelFriendRsp::has_header() const {
  return _internal_has_header();
}
inline void DelFriendRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& DelFriendRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& DelFriendRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.DelFriendRsp.header)
  return _internal_header();
}
inline void DelFriendRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.DelFriendRsp.header)
}
inline ::raybo::MsgHeader* DelFriendRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* DelFriendRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.DelFriendRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* DelFriendRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* DelFriendRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.DelFriendRsp.header)
  return _msg;
}
inline void DelFriendRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.DelFriendRsp.header)
}

// optional uint32 ret = 2;
inline bool DelFriendRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelFriendRsp::has_ret() const {
  return _internal_has_ret();
}
inline void DelFriendRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DelFriendRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t DelFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.DelFriendRsp.ret)
  return _internal_ret();
}
inline void DelFriendRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void DelFriendRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.DelFriendRsp.ret)
}

// -------------------------------------------------------------------

// PublishMessageReq

// optional .raybo.MsgHeader header = 1;
inline bool PublishMessageReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PublishMessageReq::has_header() const {
  return _internal_has_header();
}
inline void PublishMessageReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::MsgHeader& PublishMessageReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& PublishMessageReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.PublishMessageReq.header)
  return _internal_header();
}
inline void PublishMessageReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.PublishMessageReq.header)
}
inline ::raybo::MsgHeader* PublishMessageReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* PublishMessageReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.PublishMessageReq.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* PublishMessageReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* PublishMessageReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.PublishMessageReq.header)
  return _msg;
}
inline void PublishMessageReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.PublishMessageReq.header)
}

// optional uint32 user_id = 2;
inline bool PublishMessageReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMessageReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMessageReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishMessageReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t PublishMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.PublishMessageReq.user_id)
  return _internal_user_id();
}
inline void PublishMessageReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void PublishMessageReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.PublishMessageReq.user_id)
}

// optional string content = 3;
inline bool PublishMessageReq::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishMessageReq::has_content() const {
  return _internal_has_content();
}
inline void PublishMessageReq::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishMessageReq::content() const {
  // @@protoc_insertion_point(field_get:raybo.PublishMessageReq.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageReq::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.PublishMessageReq.content)
}
inline std::string* PublishMessageReq::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:raybo.PublishMessageReq.content)
  return _s;
}
inline const std::string& PublishMessageReq::_internal_content() const {
  return _impl_.content_.Get();
}
inline void PublishMessageReq::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMessageReq::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMessageReq::release_content() {
  // @@protoc_insertion_point(field_release:raybo.PublishMessageReq.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishMessageReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.PublishMessageReq.content)
}

// -------------------------------------------------------------------

// PublishMessageRsp

// optional .raybo.MsgHeader header = 1;
inline bool PublishMessageRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool PublishMessageRsp::has_header() const {
  return _internal_has_header();
}
inline void PublishMessageRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& PublishMessageRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& PublishMessageRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.PublishMessageRsp.header)
  return _internal_header();
}
inline void PublishMessageRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.PublishMessageRsp.header)
}
inline ::raybo::MsgHeader* PublishMessageRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* PublishMessageRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.PublishMessageRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* PublishMessageRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* PublishMessageRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.PublishMessageRsp.header)
  return _msg;
}
inline void PublishMessageRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.PublishMessageRsp.header)
}

// optional uint32 ret = 2;
inline bool PublishMessageRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMessageRsp::has_ret() const {
  return _internal_has_ret();
}
inline void PublishMessageRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishMessageRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t PublishMessageRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.PublishMessageRsp.ret)
  return _internal_ret();
}
inline void PublishMessageRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void PublishMessageRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.PublishMessageRsp.ret)
}

// -------------------------------------------------------------------

// GetMessageListReq

// optional .raybo.MsgHeader header = 1;
inline bool GetMessageListReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetMessageListReq::has_header() const {
  return _internal_has_header();
}
inline void GetMessageListReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& GetMessageListReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetMessageListReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetMessageListReq.header)
  return _internal_header();
}
inline void GetMessageListReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetMessageListReq.header)
}
inline ::raybo::MsgHeader* GetMessageListReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetMessageListReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetMessageListReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetMessageListReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetMessageListReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetMessageListReq.header)
  return _msg;
}
inline void GetMessageListReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetMessageListReq.header)
}

// optional uint32 user_id = 2;
inline bool GetMessageListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMessageListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetMessageListReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GetMessageListReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GetMessageListReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.GetMessageListReq.user_id)
  return _internal_user_id();
}
inline void GetMessageListReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GetMessageListReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.GetMessageListReq.user_id)
}

// -------------------------------------------------------------------

// MessageItem

// optional uint32 publisher_id = 1;
inline bool MessageItem::_internal_has_publisher_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageItem::has_publisher_id() const {
  return _internal_has_publisher_id();
}
inline void MessageItem::clear_publisher_id() {
  _impl_.publisher_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MessageItem::_internal_publisher_id() const {
  return _impl_.publisher_id_;
}
inline uint32_t MessageItem::publisher_id() const {
  // @@protoc_insertion_point(field_get:raybo.MessageItem.publisher_id)
  return _internal_publisher_id();
}
inline void MessageItem::_internal_set_publisher_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.publisher_id_ = value;
}
inline void MessageItem::set_publisher_id(uint32_t value) {
  _internal_set_publisher_id(value);
  // @@protoc_insertion_point(field_set:raybo.MessageItem.publisher_id)
}

// optional uint32 Publish_time = 2;
inline bool MessageItem::_internal_has_publish_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageItem::has_publish_time() const {
  return _internal_has_publish_time();
}
inline void MessageItem::clear_publish_time() {
  _impl_.publish_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MessageItem::_internal_publish_time() const {
  return _impl_.publish_time_;
}
inline uint32_t MessageItem::publish_time() const {
  // @@protoc_insertion_point(field_get:raybo.MessageItem.Publish_time)
  return _internal_publish_time();
}
inline void MessageItem::_internal_set_publish_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.publish_time_ = value;
}
inline void MessageItem::set_publish_time(uint32_t value) {
  _internal_set_publish_time(value);
  // @@protoc_insertion_point(field_set:raybo.MessageItem.Publish_time)
}

// optional string content = 3;
inline bool MessageItem::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageItem::has_content() const {
  return _internal_has_content();
}
inline void MessageItem::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageItem::content() const {
  // @@protoc_insertion_point(field_get:raybo.MessageItem.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.MessageItem.content)
}
inline std::string* MessageItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:raybo.MessageItem.content)
  return _s;
}
inline const std::string& MessageItem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void MessageItem::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageItem::release_content() {
  // @@protoc_insertion_point(field_release:raybo.MessageItem.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MessageItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.MessageItem.content)
}

// -------------------------------------------------------------------

// GetMessageListRsp

// optional .raybo.MsgHeader header = 1;
inline bool GetMessageListRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetMessageListRsp::has_header() const {
  return _internal_has_header();
}
inline void GetMessageListRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& GetMessageListRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetMessageListRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetMessageListRsp.header)
  return _internal_header();
}
inline void GetMessageListRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetMessageListRsp.header)
}
inline ::raybo::MsgHeader* GetMessageListRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetMessageListRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetMessageListRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetMessageListRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetMessageListRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetMessageListRsp.header)
  return _msg;
}
inline void GetMessageListRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetMessageListRsp.header)
}

// optional uint32 ret = 2;
inline bool GetMessageListRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMessageListRsp::has_ret() const {
  return _internal_has_ret();
}
inline void GetMessageListRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GetMessageListRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t GetMessageListRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.GetMessageListRsp.ret)
  return _internal_ret();
}
inline void GetMessageListRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void GetMessageListRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.GetMessageListRsp.ret)
}

// repeated .raybo.MessageItem message_list = 3;
inline int GetMessageListRsp::_internal_message_list_size() const {
  return _impl_.message_list_.size();
}
inline int GetMessageListRsp::message_list_size() const {
  return _internal_message_list_size();
}
inline void GetMessageListRsp::clear_message_list() {
  _impl_.message_list_.Clear();
}
inline ::raybo::MessageItem* GetMessageListRsp::mutable_message_list(int index) {
  // @@protoc_insertion_point(field_mutable:raybo.GetMessageListRsp.message_list)
  return _impl_.message_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raybo::MessageItem >*
GetMessageListRsp::mutable_message_list() {
  // @@protoc_insertion_point(field_mutable_list:raybo.GetMessageListRsp.message_list)
  return &_impl_.message_list_;
}
inline const ::raybo::MessageItem& GetMessageListRsp::_internal_message_list(int index) const {
  return _impl_.message_list_.Get(index);
}
inline const ::raybo::MessageItem& GetMessageListRsp::message_list(int index) const {
  // @@protoc_insertion_point(field_get:raybo.GetMessageListRsp.message_list)
  return _internal_message_list(index);
}
inline ::raybo::MessageItem* GetMessageListRsp::_internal_add_message_list() {
  return _impl_.message_list_.Add();
}
inline ::raybo::MessageItem* GetMessageListRsp::add_message_list() {
  ::raybo::MessageItem* _add = _internal_add_message_list();
  // @@protoc_insertion_point(field_add:raybo.GetMessageListRsp.message_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raybo::MessageItem >&
GetMessageListRsp::message_list() const {
  // @@protoc_insertion_point(field_list:raybo.GetMessageListRsp.message_list)
  return _impl_.message_list_;
}

// -------------------------------------------------------------------

// GetPhotoReq

// optional .raybo.MsgHeader header = 1;
inline bool GetPhotoReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetPhotoReq::has_header() const {
  return _internal_has_header();
}
inline void GetPhotoReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& GetPhotoReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetPhotoReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoReq.header)
  return _internal_header();
}
inline void GetPhotoReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetPhotoReq.header)
}
inline ::raybo::MsgHeader* GetPhotoReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetPhotoReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetPhotoReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetPhotoReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetPhotoReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetPhotoReq.header)
  return _msg;
}
inline void GetPhotoReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetPhotoReq.header)
}

// optional uint32 user_id = 2;
inline bool GetPhotoReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPhotoReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetPhotoReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GetPhotoReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GetPhotoReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoReq.user_id)
  return _internal_user_id();
}
inline void GetPhotoReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GetPhotoReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.GetPhotoReq.user_id)
}

// -------------------------------------------------------------------

// GetPhotoRsp

// optional .raybo.MsgHeader header = 1;
inline bool GetPhotoRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetPhotoRsp::has_header() const {
  return _internal_has_header();
}
inline void GetPhotoRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::MsgHeader& GetPhotoRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetPhotoRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoRsp.header)
  return _internal_header();
}
inline void GetPhotoRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetPhotoRsp.header)
}
inline ::raybo::MsgHeader* GetPhotoRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetPhotoRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetPhotoRsp.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetPhotoRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetPhotoRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetPhotoRsp.header)
  return _msg;
}
inline void GetPhotoRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetPhotoRsp.header)
}

// optional uint32 ret = 2;
inline bool GetPhotoRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetPhotoRsp::has_ret() const {
  return _internal_has_ret();
}
inline void GetPhotoRsp::clear_ret() {
  _impl_.ret_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GetPhotoRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t GetPhotoRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoRsp.ret)
  return _internal_ret();
}
inline void GetPhotoRsp::_internal_set_ret(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}
inline void GetPhotoRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.GetPhotoRsp.ret)
}

// optional uint32 last_publisher_id = 3;
inline bool GetPhotoRsp::_internal_has_last_publisher_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetPhotoRsp::has_last_publisher_id() const {
  return _internal_has_last_publisher_id();
}
inline void GetPhotoRsp::clear_last_publisher_id() {
  _impl_.last_publisher_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GetPhotoRsp::_internal_last_publisher_id() const {
  return _impl_.last_publisher_id_;
}
inline uint32_t GetPhotoRsp::last_publisher_id() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoRsp.last_publisher_id)
  return _internal_last_publisher_id();
}
inline void GetPhotoRsp::_internal_set_last_publisher_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_publisher_id_ = value;
}
inline void GetPhotoRsp::set_last_publisher_id(uint32_t value) {
  _internal_set_last_publisher_id(value);
  // @@protoc_insertion_point(field_set:raybo.GetPhotoRsp.last_publisher_id)
}

// optional string last_publish_name = 4;
inline bool GetPhotoRsp::_internal_has_last_publish_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPhotoRsp::has_last_publish_name() const {
  return _internal_has_last_publish_name();
}
inline void GetPhotoRsp::clear_last_publish_name() {
  _impl_.last_publish_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPhotoRsp::last_publish_name() const {
  // @@protoc_insertion_point(field_get:raybo.GetPhotoRsp.last_publish_name)
  return _internal_last_publish_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPhotoRsp::set_last_publish_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.last_publish_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.GetPhotoRsp.last_publish_name)
}
inline std::string* GetPhotoRsp::mutable_last_publish_name() {
  std::string* _s = _internal_mutable_last_publish_name();
  // @@protoc_insertion_point(field_mutable:raybo.GetPhotoRsp.last_publish_name)
  return _s;
}
inline const std::string& GetPhotoRsp::_internal_last_publish_name() const {
  return _impl_.last_publish_name_.Get();
}
inline void GetPhotoRsp::_internal_set_last_publish_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_publish_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPhotoRsp::_internal_mutable_last_publish_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.last_publish_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPhotoRsp::release_last_publish_name() {
  // @@protoc_insertion_point(field_release:raybo.GetPhotoRsp.last_publish_name)
  if (!_internal_has_last_publish_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.last_publish_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_publish_name_.IsDefault()) {
    _impl_.last_publish_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetPhotoRsp::set_allocated_last_publish_name(std::string* last_publish_name) {
  if (last_publish_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_publish_name_.SetAllocated(last_publish_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_publish_name_.IsDefault()) {
    _impl_.last_publish_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.GetPhotoRsp.last_publish_name)
}

// -------------------------------------------------------------------

// CommonReq

// optional .raybo.MsgHeader header = 1;
inline bool CommonReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CommonReq::has_header() const {
  return _internal_has_header();
}
inline void CommonReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& CommonReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CommonReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.header)
  return _internal_header();
}
inline void CommonReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.header)
}
inline ::raybo::MsgHeader* CommonReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CommonReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CommonReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CommonReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.header)
  return _msg;
}
inline void CommonReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.header)
}

// optional .raybo.RegReq reg_req = 2;
inline bool CommonReq::_internal_has_reg_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reg_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_reg_req() const {
  return _internal_has_reg_req();
}
inline void CommonReq::clear_reg_req() {
  if (_impl_.reg_req_ != nullptr) _impl_.reg_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::RegReq& CommonReq::_internal_reg_req() const {
  const ::raybo::RegReq* p = _impl_.reg_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::RegReq&>(
      ::raybo::_RegReq_default_instance_);
}
inline const ::raybo::RegReq& CommonReq::reg_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.reg_req)
  return _internal_reg_req();
}
inline void CommonReq::unsafe_arena_set_allocated_reg_req(
    ::raybo::RegReq* reg_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reg_req_);
  }
  _impl_.reg_req_ = reg_req;
  if (reg_req) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.reg_req)
}
inline ::raybo::RegReq* CommonReq::release_reg_req() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::RegReq* temp = _impl_.reg_req_;
  _impl_.reg_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::RegReq* CommonReq::unsafe_arena_release_reg_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.reg_req)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::RegReq* temp = _impl_.reg_req_;
  _impl_.reg_req_ = nullptr;
  return temp;
}
inline ::raybo::RegReq* CommonReq::_internal_mutable_reg_req() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reg_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::RegReq>(GetArenaForAllocation());
    _impl_.reg_req_ = p;
  }
  return _impl_.reg_req_;
}
inline ::raybo::RegReq* CommonReq::mutable_reg_req() {
  ::raybo::RegReq* _msg = _internal_mutable_reg_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.reg_req)
  return _msg;
}
inline void CommonReq::set_allocated_reg_req(::raybo::RegReq* reg_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reg_req_;
  }
  if (reg_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reg_req);
    if (message_arena != submessage_arena) {
      reg_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reg_req_ = reg_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.reg_req)
}

// optional .raybo.LoginReq login_req = 3;
inline bool CommonReq::_internal_has_login_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_login_req() const {
  return _internal_has_login_req();
}
inline void CommonReq::clear_login_req() {
  if (_impl_.login_req_ != nullptr) _impl_.login_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::LoginReq& CommonReq::_internal_login_req() const {
  const ::raybo::LoginReq* p = _impl_.login_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LoginReq&>(
      ::raybo::_LoginReq_default_instance_);
}
inline const ::raybo::LoginReq& CommonReq::login_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.login_req)
  return _internal_login_req();
}
inline void CommonReq::unsafe_arena_set_allocated_login_req(
    ::raybo::LoginReq* login_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_req_);
  }
  _impl_.login_req_ = login_req;
  if (login_req) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.login_req)
}
inline ::raybo::LoginReq* CommonReq::release_login_req() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::LoginReq* temp = _impl_.login_req_;
  _impl_.login_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LoginReq* CommonReq::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.login_req)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::LoginReq* temp = _impl_.login_req_;
  _impl_.login_req_ = nullptr;
  return temp;
}
inline ::raybo::LoginReq* CommonReq::_internal_mutable_login_req() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.login_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LoginReq>(GetArenaForAllocation());
    _impl_.login_req_ = p;
  }
  return _impl_.login_req_;
}
inline ::raybo::LoginReq* CommonReq::mutable_login_req() {
  ::raybo::LoginReq* _msg = _internal_mutable_login_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.login_req)
  return _msg;
}
inline void CommonReq::set_allocated_login_req(::raybo::LoginReq* login_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_req_;
  }
  if (login_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_req);
    if (message_arena != submessage_arena) {
      login_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.login_req_ = login_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.login_req)
}

// optional .raybo.LogoutReq logout_req = 4;
inline bool CommonReq::_internal_has_logout_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logout_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_logout_req() const {
  return _internal_has_logout_req();
}
inline void CommonReq::clear_logout_req() {
  if (_impl_.logout_req_ != nullptr) _impl_.logout_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::raybo::LogoutReq& CommonReq::_internal_logout_req() const {
  const ::raybo::LogoutReq* p = _impl_.logout_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LogoutReq&>(
      ::raybo::_LogoutReq_default_instance_);
}
inline const ::raybo::LogoutReq& CommonReq::logout_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.logout_req)
  return _internal_logout_req();
}
inline void CommonReq::unsafe_arena_set_allocated_logout_req(
    ::raybo::LogoutReq* logout_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logout_req_);
  }
  _impl_.logout_req_ = logout_req;
  if (logout_req) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.logout_req)
}
inline ::raybo::LogoutReq* CommonReq::release_logout_req() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LogoutReq* temp = _impl_.logout_req_;
  _impl_.logout_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LogoutReq* CommonReq::unsafe_arena_release_logout_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.logout_req)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LogoutReq* temp = _impl_.logout_req_;
  _impl_.logout_req_ = nullptr;
  return temp;
}
inline ::raybo::LogoutReq* CommonReq::_internal_mutable_logout_req() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.logout_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LogoutReq>(GetArenaForAllocation());
    _impl_.logout_req_ = p;
  }
  return _impl_.logout_req_;
}
inline ::raybo::LogoutReq* CommonReq::mutable_logout_req() {
  ::raybo::LogoutReq* _msg = _internal_mutable_logout_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.logout_req)
  return _msg;
}
inline void CommonReq::set_allocated_logout_req(::raybo::LogoutReq* logout_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logout_req_;
  }
  if (logout_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logout_req);
    if (message_arena != submessage_arena) {
      logout_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.logout_req_ = logout_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.logout_req)
}

// optional .raybo.AddFriendReq add_friend_req = 5;
inline bool CommonReq::_internal_has_add_friend_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.add_friend_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_add_friend_req() const {
  return _internal_has_add_friend_req();
}
inline void CommonReq::clear_add_friend_req() {
  if (_impl_.add_friend_req_ != nullptr) _impl_.add_friend_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::raybo::AddFriendReq& CommonReq::_internal_add_friend_req() const {
  const ::raybo::AddFriendReq* p = _impl_.add_friend_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::AddFriendReq&>(
      ::raybo::_AddFriendReq_default_instance_);
}
inline const ::raybo::AddFriendReq& CommonReq::add_friend_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.add_friend_req)
  return _internal_add_friend_req();
}
inline void CommonReq::unsafe_arena_set_allocated_add_friend_req(
    ::raybo::AddFriendReq* add_friend_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.add_friend_req_);
  }
  _impl_.add_friend_req_ = add_friend_req;
  if (add_friend_req) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.add_friend_req)
}
inline ::raybo::AddFriendReq* CommonReq::release_add_friend_req() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::AddFriendReq* temp = _impl_.add_friend_req_;
  _impl_.add_friend_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::AddFriendReq* CommonReq::unsafe_arena_release_add_friend_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.add_friend_req)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::AddFriendReq* temp = _impl_.add_friend_req_;
  _impl_.add_friend_req_ = nullptr;
  return temp;
}
inline ::raybo::AddFriendReq* CommonReq::_internal_mutable_add_friend_req() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.add_friend_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::AddFriendReq>(GetArenaForAllocation());
    _impl_.add_friend_req_ = p;
  }
  return _impl_.add_friend_req_;
}
inline ::raybo::AddFriendReq* CommonReq::mutable_add_friend_req() {
  ::raybo::AddFriendReq* _msg = _internal_mutable_add_friend_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.add_friend_req)
  return _msg;
}
inline void CommonReq::set_allocated_add_friend_req(::raybo::AddFriendReq* add_friend_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.add_friend_req_;
  }
  if (add_friend_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend_req);
    if (message_arena != submessage_arena) {
      add_friend_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.add_friend_req_ = add_friend_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.add_friend_req)
}

// optional .raybo.DelFriendReq del_friend_req = 6;
inline bool CommonReq::_internal_has_del_friend_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.del_friend_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_del_friend_req() const {
  return _internal_has_del_friend_req();
}
inline void CommonReq::clear_del_friend_req() {
  if (_impl_.del_friend_req_ != nullptr) _impl_.del_friend_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::raybo::DelFriendReq& CommonReq::_internal_del_friend_req() const {
  const ::raybo::DelFriendReq* p = _impl_.del_friend_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::DelFriendReq&>(
      ::raybo::_DelFriendReq_default_instance_);
}
inline const ::raybo::DelFriendReq& CommonReq::del_friend_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.del_friend_req)
  return _internal_del_friend_req();
}
inline void CommonReq::unsafe_arena_set_allocated_del_friend_req(
    ::raybo::DelFriendReq* del_friend_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.del_friend_req_);
  }
  _impl_.del_friend_req_ = del_friend_req;
  if (del_friend_req) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.del_friend_req)
}
inline ::raybo::DelFriendReq* CommonReq::release_del_friend_req() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::raybo::DelFriendReq* temp = _impl_.del_friend_req_;
  _impl_.del_friend_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::DelFriendReq* CommonReq::unsafe_arena_release_del_friend_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.del_friend_req)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::raybo::DelFriendReq* temp = _impl_.del_friend_req_;
  _impl_.del_friend_req_ = nullptr;
  return temp;
}
inline ::raybo::DelFriendReq* CommonReq::_internal_mutable_del_friend_req() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.del_friend_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::DelFriendReq>(GetArenaForAllocation());
    _impl_.del_friend_req_ = p;
  }
  return _impl_.del_friend_req_;
}
inline ::raybo::DelFriendReq* CommonReq::mutable_del_friend_req() {
  ::raybo::DelFriendReq* _msg = _internal_mutable_del_friend_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.del_friend_req)
  return _msg;
}
inline void CommonReq::set_allocated_del_friend_req(::raybo::DelFriendReq* del_friend_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.del_friend_req_;
  }
  if (del_friend_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(del_friend_req);
    if (message_arena != submessage_arena) {
      del_friend_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_friend_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.del_friend_req_ = del_friend_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.del_friend_req)
}

// optional .raybo.PublishMessageReq publish_message_req = 7;
inline bool CommonReq::_internal_has_publish_message_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_message_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_publish_message_req() const {
  return _internal_has_publish_message_req();
}
inline void CommonReq::clear_publish_message_req() {
  if (_impl_.publish_message_req_ != nullptr) _impl_.publish_message_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::raybo::PublishMessageReq& CommonReq::_internal_publish_message_req() const {
  const ::raybo::PublishMessageReq* p = _impl_.publish_message_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::PublishMessageReq&>(
      ::raybo::_PublishMessageReq_default_instance_);
}
inline const ::raybo::PublishMessageReq& CommonReq::publish_message_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.publish_message_req)
  return _internal_publish_message_req();
}
inline void CommonReq::unsafe_arena_set_allocated_publish_message_req(
    ::raybo::PublishMessageReq* publish_message_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_message_req_);
  }
  _impl_.publish_message_req_ = publish_message_req;
  if (publish_message_req) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.publish_message_req)
}
inline ::raybo::PublishMessageReq* CommonReq::release_publish_message_req() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::raybo::PublishMessageReq* temp = _impl_.publish_message_req_;
  _impl_.publish_message_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::PublishMessageReq* CommonReq::unsafe_arena_release_publish_message_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.publish_message_req)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::raybo::PublishMessageReq* temp = _impl_.publish_message_req_;
  _impl_.publish_message_req_ = nullptr;
  return temp;
}
inline ::raybo::PublishMessageReq* CommonReq::_internal_mutable_publish_message_req() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.publish_message_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::PublishMessageReq>(GetArenaForAllocation());
    _impl_.publish_message_req_ = p;
  }
  return _impl_.publish_message_req_;
}
inline ::raybo::PublishMessageReq* CommonReq::mutable_publish_message_req() {
  ::raybo::PublishMessageReq* _msg = _internal_mutable_publish_message_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.publish_message_req)
  return _msg;
}
inline void CommonReq::set_allocated_publish_message_req(::raybo::PublishMessageReq* publish_message_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publish_message_req_;
  }
  if (publish_message_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publish_message_req);
    if (message_arena != submessage_arena) {
      publish_message_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_message_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.publish_message_req_ = publish_message_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.publish_message_req)
}

// optional .raybo.GetPhotoReq get_photo_req = 8;
inline bool CommonReq::_internal_has_get_photo_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_photo_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_get_photo_req() const {
  return _internal_has_get_photo_req();
}
inline void CommonReq::clear_get_photo_req() {
  if (_impl_.get_photo_req_ != nullptr) _impl_.get_photo_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::raybo::GetPhotoReq& CommonReq::_internal_get_photo_req() const {
  const ::raybo::GetPhotoReq* p = _impl_.get_photo_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetPhotoReq&>(
      ::raybo::_GetPhotoReq_default_instance_);
}
inline const ::raybo::GetPhotoReq& CommonReq::get_photo_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.get_photo_req)
  return _internal_get_photo_req();
}
inline void CommonReq::unsafe_arena_set_allocated_get_photo_req(
    ::raybo::GetPhotoReq* get_photo_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_photo_req_);
  }
  _impl_.get_photo_req_ = get_photo_req;
  if (get_photo_req) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.get_photo_req)
}
inline ::raybo::GetPhotoReq* CommonReq::release_get_photo_req() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::raybo::GetPhotoReq* temp = _impl_.get_photo_req_;
  _impl_.get_photo_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetPhotoReq* CommonReq::unsafe_arena_release_get_photo_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.get_photo_req)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::raybo::GetPhotoReq* temp = _impl_.get_photo_req_;
  _impl_.get_photo_req_ = nullptr;
  return temp;
}
inline ::raybo::GetPhotoReq* CommonReq::_internal_mutable_get_photo_req() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.get_photo_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetPhotoReq>(GetArenaForAllocation());
    _impl_.get_photo_req_ = p;
  }
  return _impl_.get_photo_req_;
}
inline ::raybo::GetPhotoReq* CommonReq::mutable_get_photo_req() {
  ::raybo::GetPhotoReq* _msg = _internal_mutable_get_photo_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.get_photo_req)
  return _msg;
}
inline void CommonReq::set_allocated_get_photo_req(::raybo::GetPhotoReq* get_photo_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_photo_req_;
  }
  if (get_photo_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_photo_req);
    if (message_arena != submessage_arena) {
      get_photo_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_photo_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.get_photo_req_ = get_photo_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.get_photo_req)
}

// optional .raybo.GetMessageListReq get_message_list_req = 9;
inline bool CommonReq::_internal_has_get_message_list_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_message_list_req_ != nullptr);
  return value;
}
inline bool CommonReq::has_get_message_list_req() const {
  return _internal_has_get_message_list_req();
}
inline void CommonReq::clear_get_message_list_req() {
  if (_impl_.get_message_list_req_ != nullptr) _impl_.get_message_list_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::raybo::GetMessageListReq& CommonReq::_internal_get_message_list_req() const {
  const ::raybo::GetMessageListReq* p = _impl_.get_message_list_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetMessageListReq&>(
      ::raybo::_GetMessageListReq_default_instance_);
}
inline const ::raybo::GetMessageListReq& CommonReq::get_message_list_req() const {
  // @@protoc_insertion_point(field_get:raybo.CommonReq.get_message_list_req)
  return _internal_get_message_list_req();
}
inline void CommonReq::unsafe_arena_set_allocated_get_message_list_req(
    ::raybo::GetMessageListReq* get_message_list_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_message_list_req_);
  }
  _impl_.get_message_list_req_ = get_message_list_req;
  if (get_message_list_req) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonReq.get_message_list_req)
}
inline ::raybo::GetMessageListReq* CommonReq::release_get_message_list_req() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::raybo::GetMessageListReq* temp = _impl_.get_message_list_req_;
  _impl_.get_message_list_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetMessageListReq* CommonReq::unsafe_arena_release_get_message_list_req() {
  // @@protoc_insertion_point(field_release:raybo.CommonReq.get_message_list_req)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::raybo::GetMessageListReq* temp = _impl_.get_message_list_req_;
  _impl_.get_message_list_req_ = nullptr;
  return temp;
}
inline ::raybo::GetMessageListReq* CommonReq::_internal_mutable_get_message_list_req() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.get_message_list_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetMessageListReq>(GetArenaForAllocation());
    _impl_.get_message_list_req_ = p;
  }
  return _impl_.get_message_list_req_;
}
inline ::raybo::GetMessageListReq* CommonReq::mutable_get_message_list_req() {
  ::raybo::GetMessageListReq* _msg = _internal_mutable_get_message_list_req();
  // @@protoc_insertion_point(field_mutable:raybo.CommonReq.get_message_list_req)
  return _msg;
}
inline void CommonReq::set_allocated_get_message_list_req(::raybo::GetMessageListReq* get_message_list_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_message_list_req_;
  }
  if (get_message_list_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_message_list_req);
    if (message_arena != submessage_arena) {
      get_message_list_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_message_list_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.get_message_list_req_ = get_message_list_req;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonReq.get_message_list_req)
}

// -------------------------------------------------------------------

// CommonRsp

// optional .raybo.MsgHeader header = 1;
inline bool CommonRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CommonRsp::has_header() const {
  return _internal_has_header();
}
inline void CommonRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& CommonRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CommonRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.header)
  return _internal_header();
}
inline void CommonRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.header)
}
inline ::raybo::MsgHeader* CommonRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CommonRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CommonRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CommonRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.header)
  return _msg;
}
inline void CommonRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.header)
}

// optional .raybo.RegRsp reg_rsp = 2;
inline bool CommonRsp::_internal_has_reg_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reg_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_reg_rsp() const {
  return _internal_has_reg_rsp();
}
inline void CommonRsp::clear_reg_rsp() {
  if (_impl_.reg_rsp_ != nullptr) _impl_.reg_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::RegRsp& CommonRsp::_internal_reg_rsp() const {
  const ::raybo::RegRsp* p = _impl_.reg_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::RegRsp&>(
      ::raybo::_RegRsp_default_instance_);
}
inline const ::raybo::RegRsp& CommonRsp::reg_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.reg_rsp)
  return _internal_reg_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_reg_rsp(
    ::raybo::RegRsp* reg_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reg_rsp_);
  }
  _impl_.reg_rsp_ = reg_rsp;
  if (reg_rsp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.reg_rsp)
}
inline ::raybo::RegRsp* CommonRsp::release_reg_rsp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::RegRsp* temp = _impl_.reg_rsp_;
  _impl_.reg_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::RegRsp* CommonRsp::unsafe_arena_release_reg_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.reg_rsp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::RegRsp* temp = _impl_.reg_rsp_;
  _impl_.reg_rsp_ = nullptr;
  return temp;
}
inline ::raybo::RegRsp* CommonRsp::_internal_mutable_reg_rsp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reg_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::RegRsp>(GetArenaForAllocation());
    _impl_.reg_rsp_ = p;
  }
  return _impl_.reg_rsp_;
}
inline ::raybo::RegRsp* CommonRsp::mutable_reg_rsp() {
  ::raybo::RegRsp* _msg = _internal_mutable_reg_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.reg_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_reg_rsp(::raybo::RegRsp* reg_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.reg_rsp_;
  }
  if (reg_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reg_rsp);
    if (message_arena != submessage_arena) {
      reg_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reg_rsp_ = reg_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.reg_rsp)
}

// optional .raybo.LoginRsp login_rsp = 3;
inline bool CommonRsp::_internal_has_login_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void CommonRsp::clear_login_rsp() {
  if (_impl_.login_rsp_ != nullptr) _impl_.login_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::LoginRsp& CommonRsp::_internal_login_rsp() const {
  const ::raybo::LoginRsp* p = _impl_.login_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LoginRsp&>(
      ::raybo::_LoginRsp_default_instance_);
}
inline const ::raybo::LoginRsp& CommonRsp::login_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.login_rsp)
  return _internal_login_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_login_rsp(
    ::raybo::LoginRsp* login_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_rsp_);
  }
  _impl_.login_rsp_ = login_rsp;
  if (login_rsp) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.login_rsp)
}
inline ::raybo::LoginRsp* CommonRsp::release_login_rsp() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::LoginRsp* temp = _impl_.login_rsp_;
  _impl_.login_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LoginRsp* CommonRsp::unsafe_arena_release_login_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.login_rsp)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::LoginRsp* temp = _impl_.login_rsp_;
  _impl_.login_rsp_ = nullptr;
  return temp;
}
inline ::raybo::LoginRsp* CommonRsp::_internal_mutable_login_rsp() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.login_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LoginRsp>(GetArenaForAllocation());
    _impl_.login_rsp_ = p;
  }
  return _impl_.login_rsp_;
}
inline ::raybo::LoginRsp* CommonRsp::mutable_login_rsp() {
  ::raybo::LoginRsp* _msg = _internal_mutable_login_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.login_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_login_rsp(::raybo::LoginRsp* login_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_rsp_;
  }
  if (login_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_rsp);
    if (message_arena != submessage_arena) {
      login_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.login_rsp_ = login_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.login_rsp)
}

// optional .raybo.LogoutRsp logout_rsp = 4;
inline bool CommonRsp::_internal_has_logout_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logout_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_logout_rsp() const {
  return _internal_has_logout_rsp();
}
inline void CommonRsp::clear_logout_rsp() {
  if (_impl_.logout_rsp_ != nullptr) _impl_.logout_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::raybo::LogoutRsp& CommonRsp::_internal_logout_rsp() const {
  const ::raybo::LogoutRsp* p = _impl_.logout_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LogoutRsp&>(
      ::raybo::_LogoutRsp_default_instance_);
}
inline const ::raybo::LogoutRsp& CommonRsp::logout_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.logout_rsp)
  return _internal_logout_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_logout_rsp(
    ::raybo::LogoutRsp* logout_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logout_rsp_);
  }
  _impl_.logout_rsp_ = logout_rsp;
  if (logout_rsp) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.logout_rsp)
}
inline ::raybo::LogoutRsp* CommonRsp::release_logout_rsp() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LogoutRsp* temp = _impl_.logout_rsp_;
  _impl_.logout_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LogoutRsp* CommonRsp::unsafe_arena_release_logout_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.logout_rsp)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LogoutRsp* temp = _impl_.logout_rsp_;
  _impl_.logout_rsp_ = nullptr;
  return temp;
}
inline ::raybo::LogoutRsp* CommonRsp::_internal_mutable_logout_rsp() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.logout_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LogoutRsp>(GetArenaForAllocation());
    _impl_.logout_rsp_ = p;
  }
  return _impl_.logout_rsp_;
}
inline ::raybo::LogoutRsp* CommonRsp::mutable_logout_rsp() {
  ::raybo::LogoutRsp* _msg = _internal_mutable_logout_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.logout_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_logout_rsp(::raybo::LogoutRsp* logout_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logout_rsp_;
  }
  if (logout_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logout_rsp);
    if (message_arena != submessage_arena) {
      logout_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.logout_rsp_ = logout_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.logout_rsp)
}

// optional .raybo.AddFriendRsp add_friend_rsp = 5;
inline bool CommonRsp::_internal_has_add_friend_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.add_friend_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_add_friend_rsp() const {
  return _internal_has_add_friend_rsp();
}
inline void CommonRsp::clear_add_friend_rsp() {
  if (_impl_.add_friend_rsp_ != nullptr) _impl_.add_friend_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::raybo::AddFriendRsp& CommonRsp::_internal_add_friend_rsp() const {
  const ::raybo::AddFriendRsp* p = _impl_.add_friend_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::AddFriendRsp&>(
      ::raybo::_AddFriendRsp_default_instance_);
}
inline const ::raybo::AddFriendRsp& CommonRsp::add_friend_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.add_friend_rsp)
  return _internal_add_friend_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_add_friend_rsp(
    ::raybo::AddFriendRsp* add_friend_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.add_friend_rsp_);
  }
  _impl_.add_friend_rsp_ = add_friend_rsp;
  if (add_friend_rsp) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.add_friend_rsp)
}
inline ::raybo::AddFriendRsp* CommonRsp::release_add_friend_rsp() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::AddFriendRsp* temp = _impl_.add_friend_rsp_;
  _impl_.add_friend_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::AddFriendRsp* CommonRsp::unsafe_arena_release_add_friend_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.add_friend_rsp)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::AddFriendRsp* temp = _impl_.add_friend_rsp_;
  _impl_.add_friend_rsp_ = nullptr;
  return temp;
}
inline ::raybo::AddFriendRsp* CommonRsp::_internal_mutable_add_friend_rsp() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.add_friend_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::AddFriendRsp>(GetArenaForAllocation());
    _impl_.add_friend_rsp_ = p;
  }
  return _impl_.add_friend_rsp_;
}
inline ::raybo::AddFriendRsp* CommonRsp::mutable_add_friend_rsp() {
  ::raybo::AddFriendRsp* _msg = _internal_mutable_add_friend_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.add_friend_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_add_friend_rsp(::raybo::AddFriendRsp* add_friend_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.add_friend_rsp_;
  }
  if (add_friend_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(add_friend_rsp);
    if (message_arena != submessage_arena) {
      add_friend_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.add_friend_rsp_ = add_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.add_friend_rsp)
}

// optional .raybo.DelFriendRsp del_friend_rsp = 6;
inline bool CommonRsp::_internal_has_del_friend_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.del_friend_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_del_friend_rsp() const {
  return _internal_has_del_friend_rsp();
}
inline void CommonRsp::clear_del_friend_rsp() {
  if (_impl_.del_friend_rsp_ != nullptr) _impl_.del_friend_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::raybo::DelFriendRsp& CommonRsp::_internal_del_friend_rsp() const {
  const ::raybo::DelFriendRsp* p = _impl_.del_friend_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::DelFriendRsp&>(
      ::raybo::_DelFriendRsp_default_instance_);
}
inline const ::raybo::DelFriendRsp& CommonRsp::del_friend_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.del_friend_rsp)
  return _internal_del_friend_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_del_friend_rsp(
    ::raybo::DelFriendRsp* del_friend_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.del_friend_rsp_);
  }
  _impl_.del_friend_rsp_ = del_friend_rsp;
  if (del_friend_rsp) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.del_friend_rsp)
}
inline ::raybo::DelFriendRsp* CommonRsp::release_del_friend_rsp() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::raybo::DelFriendRsp* temp = _impl_.del_friend_rsp_;
  _impl_.del_friend_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::DelFriendRsp* CommonRsp::unsafe_arena_release_del_friend_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.del_friend_rsp)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::raybo::DelFriendRsp* temp = _impl_.del_friend_rsp_;
  _impl_.del_friend_rsp_ = nullptr;
  return temp;
}
inline ::raybo::DelFriendRsp* CommonRsp::_internal_mutable_del_friend_rsp() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.del_friend_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::DelFriendRsp>(GetArenaForAllocation());
    _impl_.del_friend_rsp_ = p;
  }
  return _impl_.del_friend_rsp_;
}
inline ::raybo::DelFriendRsp* CommonRsp::mutable_del_friend_rsp() {
  ::raybo::DelFriendRsp* _msg = _internal_mutable_del_friend_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.del_friend_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_del_friend_rsp(::raybo::DelFriendRsp* del_friend_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.del_friend_rsp_;
  }
  if (del_friend_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(del_friend_rsp);
    if (message_arena != submessage_arena) {
      del_friend_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_friend_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.del_friend_rsp_ = del_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.del_friend_rsp)
}

// optional .raybo.PublishMessageRsp publish_message_rsp = 7;
inline bool CommonRsp::_internal_has_publish_message_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_message_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_publish_message_rsp() const {
  return _internal_has_publish_message_rsp();
}
inline void CommonRsp::clear_publish_message_rsp() {
  if (_impl_.publish_message_rsp_ != nullptr) _impl_.publish_message_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::raybo::PublishMessageRsp& CommonRsp::_internal_publish_message_rsp() const {
  const ::raybo::PublishMessageRsp* p = _impl_.publish_message_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::PublishMessageRsp&>(
      ::raybo::_PublishMessageRsp_default_instance_);
}
inline const ::raybo::PublishMessageRsp& CommonRsp::publish_message_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.publish_message_rsp)
  return _internal_publish_message_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_publish_message_rsp(
    ::raybo::PublishMessageRsp* publish_message_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publish_message_rsp_);
  }
  _impl_.publish_message_rsp_ = publish_message_rsp;
  if (publish_message_rsp) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.publish_message_rsp)
}
inline ::raybo::PublishMessageRsp* CommonRsp::release_publish_message_rsp() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::raybo::PublishMessageRsp* temp = _impl_.publish_message_rsp_;
  _impl_.publish_message_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::PublishMessageRsp* CommonRsp::unsafe_arena_release_publish_message_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.publish_message_rsp)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::raybo::PublishMessageRsp* temp = _impl_.publish_message_rsp_;
  _impl_.publish_message_rsp_ = nullptr;
  return temp;
}
inline ::raybo::PublishMessageRsp* CommonRsp::_internal_mutable_publish_message_rsp() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.publish_message_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::PublishMessageRsp>(GetArenaForAllocation());
    _impl_.publish_message_rsp_ = p;
  }
  return _impl_.publish_message_rsp_;
}
inline ::raybo::PublishMessageRsp* CommonRsp::mutable_publish_message_rsp() {
  ::raybo::PublishMessageRsp* _msg = _internal_mutable_publish_message_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.publish_message_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_publish_message_rsp(::raybo::PublishMessageRsp* publish_message_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publish_message_rsp_;
  }
  if (publish_message_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publish_message_rsp);
    if (message_arena != submessage_arena) {
      publish_message_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_message_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.publish_message_rsp_ = publish_message_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.publish_message_rsp)
}

// optional .raybo.GetPhotoRsp get_photo_rsp = 8;
inline bool CommonRsp::_internal_has_get_photo_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_photo_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_get_photo_rsp() const {
  return _internal_has_get_photo_rsp();
}
inline void CommonRsp::clear_get_photo_rsp() {
  if (_impl_.get_photo_rsp_ != nullptr) _impl_.get_photo_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::raybo::GetPhotoRsp& CommonRsp::_internal_get_photo_rsp() const {
  const ::raybo::GetPhotoRsp* p = _impl_.get_photo_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetPhotoRsp&>(
      ::raybo::_GetPhotoRsp_default_instance_);
}
inline const ::raybo::GetPhotoRsp& CommonRsp::get_photo_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.get_photo_rsp)
  return _internal_get_photo_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_get_photo_rsp(
    ::raybo::GetPhotoRsp* get_photo_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_photo_rsp_);
  }
  _impl_.get_photo_rsp_ = get_photo_rsp;
  if (get_photo_rsp) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.get_photo_rsp)
}
inline ::raybo::GetPhotoRsp* CommonRsp::release_get_photo_rsp() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::raybo::GetPhotoRsp* temp = _impl_.get_photo_rsp_;
  _impl_.get_photo_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetPhotoRsp* CommonRsp::unsafe_arena_release_get_photo_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.get_photo_rsp)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::raybo::GetPhotoRsp* temp = _impl_.get_photo_rsp_;
  _impl_.get_photo_rsp_ = nullptr;
  return temp;
}
inline ::raybo::GetPhotoRsp* CommonRsp::_internal_mutable_get_photo_rsp() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.get_photo_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetPhotoRsp>(GetArenaForAllocation());
    _impl_.get_photo_rsp_ = p;
  }
  return _impl_.get_photo_rsp_;
}
inline ::raybo::GetPhotoRsp* CommonRsp::mutable_get_photo_rsp() {
  ::raybo::GetPhotoRsp* _msg = _internal_mutable_get_photo_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.get_photo_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_get_photo_rsp(::raybo::GetPhotoRsp* get_photo_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_photo_rsp_;
  }
  if (get_photo_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_photo_rsp);
    if (message_arena != submessage_arena) {
      get_photo_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_photo_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.get_photo_rsp_ = get_photo_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.get_photo_rsp)
}

// optional .raybo.GetMessageListRsp get_message_list_rsp = 9;
inline bool CommonRsp::_internal_has_get_message_list_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_message_list_rsp_ != nullptr);
  return value;
}
inline bool CommonRsp::has_get_message_list_rsp() const {
  return _internal_has_get_message_list_rsp();
}
inline void CommonRsp::clear_get_message_list_rsp() {
  if (_impl_.get_message_list_rsp_ != nullptr) _impl_.get_message_list_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::raybo::GetMessageListRsp& CommonRsp::_internal_get_message_list_rsp() const {
  const ::raybo::GetMessageListRsp* p = _impl_.get_message_list_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetMessageListRsp&>(
      ::raybo::_GetMessageListRsp_default_instance_);
}
inline const ::raybo::GetMessageListRsp& CommonRsp::get_message_list_rsp() const {
  // @@protoc_insertion_point(field_get:raybo.CommonRsp.get_message_list_rsp)
  return _internal_get_message_list_rsp();
}
inline void CommonRsp::unsafe_arena_set_allocated_get_message_list_rsp(
    ::raybo::GetMessageListRsp* get_message_list_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_message_list_rsp_);
  }
  _impl_.get_message_list_rsp_ = get_message_list_rsp;
  if (get_message_list_rsp) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CommonRsp.get_message_list_rsp)
}
inline ::raybo::GetMessageListRsp* CommonRsp::release_get_message_list_rsp() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::raybo::GetMessageListRsp* temp = _impl_.get_message_list_rsp_;
  _impl_.get_message_list_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetMessageListRsp* CommonRsp::unsafe_arena_release_get_message_list_rsp() {
  // @@protoc_insertion_point(field_release:raybo.CommonRsp.get_message_list_rsp)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::raybo::GetMessageListRsp* temp = _impl_.get_message_list_rsp_;
  _impl_.get_message_list_rsp_ = nullptr;
  return temp;
}
inline ::raybo::GetMessageListRsp* CommonRsp::_internal_mutable_get_message_list_rsp() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.get_message_list_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetMessageListRsp>(GetArenaForAllocation());
    _impl_.get_message_list_rsp_ = p;
  }
  return _impl_.get_message_list_rsp_;
}
inline ::raybo::GetMessageListRsp* CommonRsp::mutable_get_message_list_rsp() {
  ::raybo::GetMessageListRsp* _msg = _internal_mutable_get_message_list_rsp();
  // @@protoc_insertion_point(field_mutable:raybo.CommonRsp.get_message_list_rsp)
  return _msg;
}
inline void CommonRsp::set_allocated_get_message_list_rsp(::raybo::GetMessageListRsp* get_message_list_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_message_list_rsp_;
  }
  if (get_message_list_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_message_list_rsp);
    if (message_arena != submessage_arena) {
      get_message_list_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_message_list_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.get_message_list_rsp_ = get_message_list_rsp;
  // @@protoc_insertion_point(field_set_allocated:raybo.CommonRsp.get_message_list_rsp)
}

// -------------------------------------------------------------------

// GetUserIdByNameReq

// optional .raybo.MsgHeader header = 1;
inline bool GetUserIdByNameReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetUserIdByNameReq::has_header() const {
  return _internal_has_header();
}
inline void GetUserIdByNameReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::MsgHeader& GetUserIdByNameReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetUserIdByNameReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetUserIdByNameReq.header)
  return _internal_header();
}
inline void GetUserIdByNameReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetUserIdByNameReq.header)
}
inline ::raybo::MsgHeader* GetUserIdByNameReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetUserIdByNameReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetUserIdByNameReq.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetUserIdByNameReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetUserIdByNameReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetUserIdByNameReq.header)
  return _msg;
}
inline void GetUserIdByNameReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetUserIdByNameReq.header)
}

// optional string user_name = 2;
inline bool GetUserIdByNameReq::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetUserIdByNameReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void GetUserIdByNameReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetUserIdByNameReq::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.GetUserIdByNameReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserIdByNameReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.GetUserIdByNameReq.user_name)
}
inline std::string* GetUserIdByNameReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.GetUserIdByNameReq.user_name)
  return _s;
}
inline const std::string& GetUserIdByNameReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void GetUserIdByNameReq::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserIdByNameReq::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserIdByNameReq::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.GetUserIdByNameReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetUserIdByNameReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.GetUserIdByNameReq.user_name)
}

// -------------------------------------------------------------------

// GetUserIdByNameRsp

// optional .raybo.MsgHeader header = 1;
inline bool GetUserIdByNameRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool GetUserIdByNameRsp::has_header() const {
  return _internal_has_header();
}
inline void GetUserIdByNameRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& GetUserIdByNameRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& GetUserIdByNameRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.GetUserIdByNameRsp.header)
  return _internal_header();
}
inline void GetUserIdByNameRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.GetUserIdByNameRsp.header)
}
inline ::raybo::MsgHeader* GetUserIdByNameRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* GetUserIdByNameRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.GetUserIdByNameRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* GetUserIdByNameRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* GetUserIdByNameRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.GetUserIdByNameRsp.header)
  return _msg;
}
inline void GetUserIdByNameRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.GetUserIdByNameRsp.header)
}

// optional int32 ret = 2;
inline bool GetUserIdByNameRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetUserIdByNameRsp::has_ret() const {
  return _internal_has_ret();
}
inline void GetUserIdByNameRsp::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t GetUserIdByNameRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline int32_t GetUserIdByNameRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.GetUserIdByNameRsp.ret)
  return _internal_ret();
}
inline void GetUserIdByNameRsp::_internal_set_ret(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void GetUserIdByNameRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.GetUserIdByNameRsp.ret)
}

// optional int32 user_id = 3;
inline bool GetUserIdByNameRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetUserIdByNameRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetUserIdByNameRsp::clear_user_id() {
  _impl_.user_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t GetUserIdByNameRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t GetUserIdByNameRsp::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.GetUserIdByNameRsp.user_id)
  return _internal_user_id();
}
inline void GetUserIdByNameRsp::_internal_set_user_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void GetUserIdByNameRsp::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.GetUserIdByNameRsp.user_id)
}

// -------------------------------------------------------------------

// CreateUserReq

// optional .raybo.MsgHeader header = 1;
inline bool CreateUserReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CreateUserReq::has_header() const {
  return _internal_has_header();
}
inline void CreateUserReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::MsgHeader& CreateUserReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CreateUserReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserReq.header)
  return _internal_header();
}
inline void CreateUserReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CreateUserReq.header)
}
inline ::raybo::MsgHeader* CreateUserReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CreateUserReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CreateUserReq.header)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CreateUserReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CreateUserReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CreateUserReq.header)
  return _msg;
}
inline void CreateUserReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CreateUserReq.header)
}

// optional string user_name = 2;
inline bool CreateUserReq::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateUserReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void CreateUserReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateUserReq::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.CreateUserReq.user_name)
}
inline std::string* CreateUserReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.CreateUserReq.user_name)
  return _s;
}
inline const std::string& CreateUserReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void CreateUserReq::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUserReq::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateUserReq::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.CreateUserReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateUserReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.CreateUserReq.user_name)
}

// optional string password = 3;
inline bool CreateUserReq::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateUserReq::has_password() const {
  return _internal_has_password();
}
inline void CreateUserReq::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateUserReq::password() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserReq::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.CreateUserReq.password)
}
inline std::string* CreateUserReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:raybo.CreateUserReq.password)
  return _s;
}
inline const std::string& CreateUserReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CreateUserReq::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUserReq::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateUserReq::release_password() {
  // @@protoc_insertion_point(field_release:raybo.CreateUserReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateUserReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.CreateUserReq.password)
}

// optional int32 from = 4;
inline bool CreateUserReq::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreateUserReq::has_from() const {
  return _internal_has_from();
}
inline void CreateUserReq::clear_from() {
  _impl_.from_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CreateUserReq::_internal_from() const {
  return _impl_.from_;
}
inline int32_t CreateUserReq::from() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserReq.from)
  return _internal_from();
}
inline void CreateUserReq::_internal_set_from(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.from_ = value;
}
inline void CreateUserReq::set_from(int32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:raybo.CreateUserReq.from)
}

// -------------------------------------------------------------------

// CreateUserRsp

// optional .raybo.MsgHeader header = 1;
inline bool CreateUserRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CreateUserRsp::has_header() const {
  return _internal_has_header();
}
inline void CreateUserRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& CreateUserRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CreateUserRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserRsp.header)
  return _internal_header();
}
inline void CreateUserRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CreateUserRsp.header)
}
inline ::raybo::MsgHeader* CreateUserRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CreateUserRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CreateUserRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CreateUserRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CreateUserRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CreateUserRsp.header)
  return _msg;
}
inline void CreateUserRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CreateUserRsp.header)
}

// optional int32 ret = 2;
inline bool CreateUserRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateUserRsp::has_ret() const {
  return _internal_has_ret();
}
inline void CreateUserRsp::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CreateUserRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline int32_t CreateUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserRsp.ret)
  return _internal_ret();
}
inline void CreateUserRsp::_internal_set_ret(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void CreateUserRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.CreateUserRsp.ret)
}

// optional int32 user_id = 3;
inline bool CreateUserRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateUserRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void CreateUserRsp::clear_user_id() {
  _impl_.user_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CreateUserRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t CreateUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.CreateUserRsp.user_id)
  return _internal_user_id();
}
inline void CreateUserRsp::_internal_set_user_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void CreateUserRsp::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.CreateUserRsp.user_id)
}

// -------------------------------------------------------------------

// LoginCheckReq

// optional .raybo.MsgHeader header = 1;
inline bool LoginCheckReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool LoginCheckReq::has_header() const {
  return _internal_has_header();
}
inline void LoginCheckReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::MsgHeader& LoginCheckReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& LoginCheckReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckReq.header)
  return _internal_header();
}
inline void LoginCheckReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.LoginCheckReq.header)
}
inline ::raybo::MsgHeader* LoginCheckReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* LoginCheckReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.LoginCheckReq.header)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* LoginCheckReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* LoginCheckReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.LoginCheckReq.header)
  return _msg;
}
inline void LoginCheckReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginCheckReq.header)
}

// optional string user_name = 2;
inline bool LoginCheckReq::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginCheckReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void LoginCheckReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginCheckReq::user_name() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginCheckReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.LoginCheckReq.user_name)
}
inline std::string* LoginCheckReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:raybo.LoginCheckReq.user_name)
  return _s;
}
inline const std::string& LoginCheckReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void LoginCheckReq::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginCheckReq::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginCheckReq::release_user_name() {
  // @@protoc_insertion_point(field_release:raybo.LoginCheckReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginCheckReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginCheckReq.user_name)
}

// optional string password = 3;
inline bool LoginCheckReq::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginCheckReq::has_password() const {
  return _internal_has_password();
}
inline void LoginCheckReq::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginCheckReq::password() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginCheckReq::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raybo.LoginCheckReq.password)
}
inline std::string* LoginCheckReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:raybo.LoginCheckReq.password)
  return _s;
}
inline const std::string& LoginCheckReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginCheckReq::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginCheckReq::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginCheckReq::release_password() {
  // @@protoc_insertion_point(field_release:raybo.LoginCheckReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginCheckReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginCheckReq.password)
}

// -------------------------------------------------------------------

// LoginCheckRsp

// optional .raybo.MsgHeader header = 1;
inline bool LoginCheckRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool LoginCheckRsp::has_header() const {
  return _internal_has_header();
}
inline void LoginCheckRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& LoginCheckRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& LoginCheckRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckRsp.header)
  return _internal_header();
}
inline void LoginCheckRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.LoginCheckRsp.header)
}
inline ::raybo::MsgHeader* LoginCheckRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* LoginCheckRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.LoginCheckRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* LoginCheckRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* LoginCheckRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.LoginCheckRsp.header)
  return _msg;
}
inline void LoginCheckRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.LoginCheckRsp.header)
}

// optional int32 ret = 2;
inline bool LoginCheckRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginCheckRsp::has_ret() const {
  return _internal_has_ret();
}
inline void LoginCheckRsp::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t LoginCheckRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline int32_t LoginCheckRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckRsp.ret)
  return _internal_ret();
}
inline void LoginCheckRsp::_internal_set_ret(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void LoginCheckRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.LoginCheckRsp.ret)
}

// optional int32 user_id = 3;
inline bool LoginCheckRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginCheckRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void LoginCheckRsp::clear_user_id() {
  _impl_.user_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t LoginCheckRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t LoginCheckRsp::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.LoginCheckRsp.user_id)
  return _internal_user_id();
}
inline void LoginCheckRsp::_internal_set_user_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void LoginCheckRsp::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.LoginCheckRsp.user_id)
}

// -------------------------------------------------------------------

// CheckUserExistReq

// optional .raybo.MsgHeader header = 1;
inline bool CheckUserExistReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CheckUserExistReq::has_header() const {
  return _internal_has_header();
}
inline void CheckUserExistReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& CheckUserExistReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CheckUserExistReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.CheckUserExistReq.header)
  return _internal_header();
}
inline void CheckUserExistReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CheckUserExistReq.header)
}
inline ::raybo::MsgHeader* CheckUserExistReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CheckUserExistReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CheckUserExistReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CheckUserExistReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CheckUserExistReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CheckUserExistReq.header)
  return _msg;
}
inline void CheckUserExistReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CheckUserExistReq.header)
}

// optional int32 user_id = 2;
inline bool CheckUserExistReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckUserExistReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void CheckUserExistReq::clear_user_id() {
  _impl_.user_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CheckUserExistReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t CheckUserExistReq::user_id() const {
  // @@protoc_insertion_point(field_get:raybo.CheckUserExistReq.user_id)
  return _internal_user_id();
}
inline void CheckUserExistReq::_internal_set_user_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void CheckUserExistReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:raybo.CheckUserExistReq.user_id)
}

// -------------------------------------------------------------------

// CheckUserExistRsp

// optional .raybo.MsgHeader header = 1;
inline bool CheckUserExistRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool CheckUserExistRsp::has_header() const {
  return _internal_has_header();
}
inline void CheckUserExistRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& CheckUserExistRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& CheckUserExistRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.CheckUserExistRsp.header)
  return _internal_header();
}
inline void CheckUserExistRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.CheckUserExistRsp.header)
}
inline ::raybo::MsgHeader* CheckUserExistRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* CheckUserExistRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.CheckUserExistRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* CheckUserExistRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* CheckUserExistRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.CheckUserExistRsp.header)
  return _msg;
}
inline void CheckUserExistRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.CheckUserExistRsp.header)
}

// optional int32 ret = 2;
inline bool CheckUserExistRsp::_internal_has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CheckUserExistRsp::has_ret() const {
  return _internal_has_ret();
}
inline void CheckUserExistRsp::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CheckUserExistRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline int32_t CheckUserExistRsp::ret() const {
  // @@protoc_insertion_point(field_get:raybo.CheckUserExistRsp.ret)
  return _internal_ret();
}
inline void CheckUserExistRsp::_internal_set_ret(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}
inline void CheckUserExistRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:raybo.CheckUserExistRsp.ret)
}

// -------------------------------------------------------------------

// ServerToUserReq

// optional .raybo.MsgHeader header = 1;
inline bool ServerToUserReq::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool ServerToUserReq::has_header() const {
  return _internal_has_header();
}
inline void ServerToUserReq::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& ServerToUserReq::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& ServerToUserReq::header() const {
  // @@protoc_insertion_point(field_get:raybo.ServerToUserReq.header)
  return _internal_header();
}
inline void ServerToUserReq::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.ServerToUserReq.header)
}
inline ::raybo::MsgHeader* ServerToUserReq::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* ServerToUserReq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.ServerToUserReq.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* ServerToUserReq::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* ServerToUserReq::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.ServerToUserReq.header)
  return _msg;
}
inline void ServerToUserReq::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.ServerToUserReq.header)
}

// optional .raybo.GetUserIdByNameReq get_user_id = 2;
inline bool ServerToUserReq::_internal_has_get_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_user_id_ != nullptr);
  return value;
}
inline bool ServerToUserReq::has_get_user_id() const {
  return _internal_has_get_user_id();
}
inline void ServerToUserReq::clear_get_user_id() {
  if (_impl_.get_user_id_ != nullptr) _impl_.get_user_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::GetUserIdByNameReq& ServerToUserReq::_internal_get_user_id() const {
  const ::raybo::GetUserIdByNameReq* p = _impl_.get_user_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetUserIdByNameReq&>(
      ::raybo::_GetUserIdByNameReq_default_instance_);
}
inline const ::raybo::GetUserIdByNameReq& ServerToUserReq::get_user_id() const {
  // @@protoc_insertion_point(field_get:raybo.ServerToUserReq.get_user_id)
  return _internal_get_user_id();
}
inline void ServerToUserReq::unsafe_arena_set_allocated_get_user_id(
    ::raybo::GetUserIdByNameReq* get_user_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_user_id_);
  }
  _impl_.get_user_id_ = get_user_id;
  if (get_user_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.ServerToUserReq.get_user_id)
}
inline ::raybo::GetUserIdByNameReq* ServerToUserReq::release_get_user_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::GetUserIdByNameReq* temp = _impl_.get_user_id_;
  _impl_.get_user_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetUserIdByNameReq* ServerToUserReq::unsafe_arena_release_get_user_id() {
  // @@protoc_insertion_point(field_release:raybo.ServerToUserReq.get_user_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::GetUserIdByNameReq* temp = _impl_.get_user_id_;
  _impl_.get_user_id_ = nullptr;
  return temp;
}
inline ::raybo::GetUserIdByNameReq* ServerToUserReq::_internal_mutable_get_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.get_user_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetUserIdByNameReq>(GetArenaForAllocation());
    _impl_.get_user_id_ = p;
  }
  return _impl_.get_user_id_;
}
inline ::raybo::GetUserIdByNameReq* ServerToUserReq::mutable_get_user_id() {
  ::raybo::GetUserIdByNameReq* _msg = _internal_mutable_get_user_id();
  // @@protoc_insertion_point(field_mutable:raybo.ServerToUserReq.get_user_id)
  return _msg;
}
inline void ServerToUserReq::set_allocated_get_user_id(::raybo::GetUserIdByNameReq* get_user_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_user_id_;
  }
  if (get_user_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_user_id);
    if (message_arena != submessage_arena) {
      get_user_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_user_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.get_user_id_ = get_user_id;
  // @@protoc_insertion_point(field_set_allocated:raybo.ServerToUserReq.get_user_id)
}

// optional .raybo.CreateUserReq create_user = 3;
inline bool ServerToUserReq::_internal_has_create_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.create_user_ != nullptr);
  return value;
}
inline bool ServerToUserReq::has_create_user() const {
  return _internal_has_create_user();
}
inline void ServerToUserReq::clear_create_user() {
  if (_impl_.create_user_ != nullptr) _impl_.create_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::CreateUserReq& ServerToUserReq::_internal_create_user() const {
  const ::raybo::CreateUserReq* p = _impl_.create_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::CreateUserReq&>(
      ::raybo::_CreateUserReq_default_instance_);
}
inline const ::raybo::CreateUserReq& ServerToUserReq::create_user() const {
  // @@protoc_insertion_point(field_get:raybo.ServerToUserReq.create_user)
  return _internal_create_user();
}
inline void ServerToUserReq::unsafe_arena_set_allocated_create_user(
    ::raybo::CreateUserReq* create_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_user_);
  }
  _impl_.create_user_ = create_user;
  if (create_user) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.ServerToUserReq.create_user)
}
inline ::raybo::CreateUserReq* ServerToUserReq::release_create_user() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::CreateUserReq* temp = _impl_.create_user_;
  _impl_.create_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::CreateUserReq* ServerToUserReq::unsafe_arena_release_create_user() {
  // @@protoc_insertion_point(field_release:raybo.ServerToUserReq.create_user)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::CreateUserReq* temp = _impl_.create_user_;
  _impl_.create_user_ = nullptr;
  return temp;
}
inline ::raybo::CreateUserReq* ServerToUserReq::_internal_mutable_create_user() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.create_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::CreateUserReq>(GetArenaForAllocation());
    _impl_.create_user_ = p;
  }
  return _impl_.create_user_;
}
inline ::raybo::CreateUserReq* ServerToUserReq::mutable_create_user() {
  ::raybo::CreateUserReq* _msg = _internal_mutable_create_user();
  // @@protoc_insertion_point(field_mutable:raybo.ServerToUserReq.create_user)
  return _msg;
}
inline void ServerToUserReq::set_allocated_create_user(::raybo::CreateUserReq* create_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.create_user_;
  }
  if (create_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_user);
    if (message_arena != submessage_arena) {
      create_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.create_user_ = create_user;
  // @@protoc_insertion_point(field_set_allocated:raybo.ServerToUserReq.create_user)
}

// optional .raybo.LoginCheckReq login_check = 4;
inline bool ServerToUserReq::_internal_has_login_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_check_ != nullptr);
  return value;
}
inline bool ServerToUserReq::has_login_check() const {
  return _internal_has_login_check();
}
inline void ServerToUserReq::clear_login_check() {
  if (_impl_.login_check_ != nullptr) _impl_.login_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::raybo::LoginCheckReq& ServerToUserReq::_internal_login_check() const {
  const ::raybo::LoginCheckReq* p = _impl_.login_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LoginCheckReq&>(
      ::raybo::_LoginCheckReq_default_instance_);
}
inline const ::raybo::LoginCheckReq& ServerToUserReq::login_check() const {
  // @@protoc_insertion_point(field_get:raybo.ServerToUserReq.login_check)
  return _internal_login_check();
}
inline void ServerToUserReq::unsafe_arena_set_allocated_login_check(
    ::raybo::LoginCheckReq* login_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_check_);
  }
  _impl_.login_check_ = login_check;
  if (login_check) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.ServerToUserReq.login_check)
}
inline ::raybo::LoginCheckReq* ServerToUserReq::release_login_check() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LoginCheckReq* temp = _impl_.login_check_;
  _impl_.login_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LoginCheckReq* ServerToUserReq::unsafe_arena_release_login_check() {
  // @@protoc_insertion_point(field_release:raybo.ServerToUserReq.login_check)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LoginCheckReq* temp = _impl_.login_check_;
  _impl_.login_check_ = nullptr;
  return temp;
}
inline ::raybo::LoginCheckReq* ServerToUserReq::_internal_mutable_login_check() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.login_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LoginCheckReq>(GetArenaForAllocation());
    _impl_.login_check_ = p;
  }
  return _impl_.login_check_;
}
inline ::raybo::LoginCheckReq* ServerToUserReq::mutable_login_check() {
  ::raybo::LoginCheckReq* _msg = _internal_mutable_login_check();
  // @@protoc_insertion_point(field_mutable:raybo.ServerToUserReq.login_check)
  return _msg;
}
inline void ServerToUserReq::set_allocated_login_check(::raybo::LoginCheckReq* login_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_check_;
  }
  if (login_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_check);
    if (message_arena != submessage_arena) {
      login_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.login_check_ = login_check;
  // @@protoc_insertion_point(field_set_allocated:raybo.ServerToUserReq.login_check)
}

// optional .raybo.CheckUserExistReq check_user_exist = 5;
inline bool ServerToUserReq::_internal_has_check_user_exist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_user_exist_ != nullptr);
  return value;
}
inline bool ServerToUserReq::has_check_user_exist() const {
  return _internal_has_check_user_exist();
}
inline void ServerToUserReq::clear_check_user_exist() {
  if (_impl_.check_user_exist_ != nullptr) _impl_.check_user_exist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::raybo::CheckUserExistReq& ServerToUserReq::_internal_check_user_exist() const {
  const ::raybo::CheckUserExistReq* p = _impl_.check_user_exist_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::CheckUserExistReq&>(
      ::raybo::_CheckUserExistReq_default_instance_);
}
inline const ::raybo::CheckUserExistReq& ServerToUserReq::check_user_exist() const {
  // @@protoc_insertion_point(field_get:raybo.ServerToUserReq.check_user_exist)
  return _internal_check_user_exist();
}
inline void ServerToUserReq::unsafe_arena_set_allocated_check_user_exist(
    ::raybo::CheckUserExistReq* check_user_exist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_user_exist_);
  }
  _impl_.check_user_exist_ = check_user_exist;
  if (check_user_exist) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.ServerToUserReq.check_user_exist)
}
inline ::raybo::CheckUserExistReq* ServerToUserReq::release_check_user_exist() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::CheckUserExistReq* temp = _impl_.check_user_exist_;
  _impl_.check_user_exist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::CheckUserExistReq* ServerToUserReq::unsafe_arena_release_check_user_exist() {
  // @@protoc_insertion_point(field_release:raybo.ServerToUserReq.check_user_exist)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::CheckUserExistReq* temp = _impl_.check_user_exist_;
  _impl_.check_user_exist_ = nullptr;
  return temp;
}
inline ::raybo::CheckUserExistReq* ServerToUserReq::_internal_mutable_check_user_exist() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.check_user_exist_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::CheckUserExistReq>(GetArenaForAllocation());
    _impl_.check_user_exist_ = p;
  }
  return _impl_.check_user_exist_;
}
inline ::raybo::CheckUserExistReq* ServerToUserReq::mutable_check_user_exist() {
  ::raybo::CheckUserExistReq* _msg = _internal_mutable_check_user_exist();
  // @@protoc_insertion_point(field_mutable:raybo.ServerToUserReq.check_user_exist)
  return _msg;
}
inline void ServerToUserReq::set_allocated_check_user_exist(::raybo::CheckUserExistReq* check_user_exist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.check_user_exist_;
  }
  if (check_user_exist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_user_exist);
    if (message_arena != submessage_arena) {
      check_user_exist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_user_exist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.check_user_exist_ = check_user_exist;
  // @@protoc_insertion_point(field_set_allocated:raybo.ServerToUserReq.check_user_exist)
}

// -------------------------------------------------------------------

// UserToServerRsp

// optional .raybo.MsgHeader header = 1;
inline bool UserToServerRsp::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool UserToServerRsp::has_header() const {
  return _internal_has_header();
}
inline void UserToServerRsp::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::raybo::MsgHeader& UserToServerRsp::_internal_header() const {
  const ::raybo::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::MsgHeader&>(
      ::raybo::_MsgHeader_default_instance_);
}
inline const ::raybo::MsgHeader& UserToServerRsp::header() const {
  // @@protoc_insertion_point(field_get:raybo.UserToServerRsp.header)
  return _internal_header();
}
inline void UserToServerRsp::unsafe_arena_set_allocated_header(
    ::raybo::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.UserToServerRsp.header)
}
inline ::raybo::MsgHeader* UserToServerRsp::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::MsgHeader* UserToServerRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:raybo.UserToServerRsp.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::raybo::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::raybo::MsgHeader* UserToServerRsp::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::raybo::MsgHeader* UserToServerRsp::mutable_header() {
  ::raybo::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:raybo.UserToServerRsp.header)
  return _msg;
}
inline void UserToServerRsp::set_allocated_header(::raybo::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raybo.UserToServerRsp.header)
}

// optional .raybo.GetUserIdByNameRsp get_user_id = 2;
inline bool UserToServerRsp::_internal_has_get_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.get_user_id_ != nullptr);
  return value;
}
inline bool UserToServerRsp::has_get_user_id() const {
  return _internal_has_get_user_id();
}
inline void UserToServerRsp::clear_get_user_id() {
  if (_impl_.get_user_id_ != nullptr) _impl_.get_user_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::raybo::GetUserIdByNameRsp& UserToServerRsp::_internal_get_user_id() const {
  const ::raybo::GetUserIdByNameRsp* p = _impl_.get_user_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::GetUserIdByNameRsp&>(
      ::raybo::_GetUserIdByNameRsp_default_instance_);
}
inline const ::raybo::GetUserIdByNameRsp& UserToServerRsp::get_user_id() const {
  // @@protoc_insertion_point(field_get:raybo.UserToServerRsp.get_user_id)
  return _internal_get_user_id();
}
inline void UserToServerRsp::unsafe_arena_set_allocated_get_user_id(
    ::raybo::GetUserIdByNameRsp* get_user_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.get_user_id_);
  }
  _impl_.get_user_id_ = get_user_id;
  if (get_user_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.UserToServerRsp.get_user_id)
}
inline ::raybo::GetUserIdByNameRsp* UserToServerRsp::release_get_user_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::GetUserIdByNameRsp* temp = _impl_.get_user_id_;
  _impl_.get_user_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::GetUserIdByNameRsp* UserToServerRsp::unsafe_arena_release_get_user_id() {
  // @@protoc_insertion_point(field_release:raybo.UserToServerRsp.get_user_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::raybo::GetUserIdByNameRsp* temp = _impl_.get_user_id_;
  _impl_.get_user_id_ = nullptr;
  return temp;
}
inline ::raybo::GetUserIdByNameRsp* UserToServerRsp::_internal_mutable_get_user_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.get_user_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::GetUserIdByNameRsp>(GetArenaForAllocation());
    _impl_.get_user_id_ = p;
  }
  return _impl_.get_user_id_;
}
inline ::raybo::GetUserIdByNameRsp* UserToServerRsp::mutable_get_user_id() {
  ::raybo::GetUserIdByNameRsp* _msg = _internal_mutable_get_user_id();
  // @@protoc_insertion_point(field_mutable:raybo.UserToServerRsp.get_user_id)
  return _msg;
}
inline void UserToServerRsp::set_allocated_get_user_id(::raybo::GetUserIdByNameRsp* get_user_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.get_user_id_;
  }
  if (get_user_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_user_id);
    if (message_arena != submessage_arena) {
      get_user_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_user_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.get_user_id_ = get_user_id;
  // @@protoc_insertion_point(field_set_allocated:raybo.UserToServerRsp.get_user_id)
}

// optional .raybo.CreateUserRsp create_user = 3;
inline bool UserToServerRsp::_internal_has_create_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.create_user_ != nullptr);
  return value;
}
inline bool UserToServerRsp::has_create_user() const {
  return _internal_has_create_user();
}
inline void UserToServerRsp::clear_create_user() {
  if (_impl_.create_user_ != nullptr) _impl_.create_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::raybo::CreateUserRsp& UserToServerRsp::_internal_create_user() const {
  const ::raybo::CreateUserRsp* p = _impl_.create_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::CreateUserRsp&>(
      ::raybo::_CreateUserRsp_default_instance_);
}
inline const ::raybo::CreateUserRsp& UserToServerRsp::create_user() const {
  // @@protoc_insertion_point(field_get:raybo.UserToServerRsp.create_user)
  return _internal_create_user();
}
inline void UserToServerRsp::unsafe_arena_set_allocated_create_user(
    ::raybo::CreateUserRsp* create_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.create_user_);
  }
  _impl_.create_user_ = create_user;
  if (create_user) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.UserToServerRsp.create_user)
}
inline ::raybo::CreateUserRsp* UserToServerRsp::release_create_user() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::CreateUserRsp* temp = _impl_.create_user_;
  _impl_.create_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::CreateUserRsp* UserToServerRsp::unsafe_arena_release_create_user() {
  // @@protoc_insertion_point(field_release:raybo.UserToServerRsp.create_user)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::raybo::CreateUserRsp* temp = _impl_.create_user_;
  _impl_.create_user_ = nullptr;
  return temp;
}
inline ::raybo::CreateUserRsp* UserToServerRsp::_internal_mutable_create_user() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.create_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::CreateUserRsp>(GetArenaForAllocation());
    _impl_.create_user_ = p;
  }
  return _impl_.create_user_;
}
inline ::raybo::CreateUserRsp* UserToServerRsp::mutable_create_user() {
  ::raybo::CreateUserRsp* _msg = _internal_mutable_create_user();
  // @@protoc_insertion_point(field_mutable:raybo.UserToServerRsp.create_user)
  return _msg;
}
inline void UserToServerRsp::set_allocated_create_user(::raybo::CreateUserRsp* create_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.create_user_;
  }
  if (create_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_user);
    if (message_arena != submessage_arena) {
      create_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.create_user_ = create_user;
  // @@protoc_insertion_point(field_set_allocated:raybo.UserToServerRsp.create_user)
}

// optional .raybo.LoginCheckRsp login_check = 4;
inline bool UserToServerRsp::_internal_has_login_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_check_ != nullptr);
  return value;
}
inline bool UserToServerRsp::has_login_check() const {
  return _internal_has_login_check();
}
inline void UserToServerRsp::clear_login_check() {
  if (_impl_.login_check_ != nullptr) _impl_.login_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::raybo::LoginCheckRsp& UserToServerRsp::_internal_login_check() const {
  const ::raybo::LoginCheckRsp* p = _impl_.login_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::LoginCheckRsp&>(
      ::raybo::_LoginCheckRsp_default_instance_);
}
inline const ::raybo::LoginCheckRsp& UserToServerRsp::login_check() const {
  // @@protoc_insertion_point(field_get:raybo.UserToServerRsp.login_check)
  return _internal_login_check();
}
inline void UserToServerRsp::unsafe_arena_set_allocated_login_check(
    ::raybo::LoginCheckRsp* login_check) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_check_);
  }
  _impl_.login_check_ = login_check;
  if (login_check) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.UserToServerRsp.login_check)
}
inline ::raybo::LoginCheckRsp* UserToServerRsp::release_login_check() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LoginCheckRsp* temp = _impl_.login_check_;
  _impl_.login_check_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::LoginCheckRsp* UserToServerRsp::unsafe_arena_release_login_check() {
  // @@protoc_insertion_point(field_release:raybo.UserToServerRsp.login_check)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::raybo::LoginCheckRsp* temp = _impl_.login_check_;
  _impl_.login_check_ = nullptr;
  return temp;
}
inline ::raybo::LoginCheckRsp* UserToServerRsp::_internal_mutable_login_check() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.login_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::LoginCheckRsp>(GetArenaForAllocation());
    _impl_.login_check_ = p;
  }
  return _impl_.login_check_;
}
inline ::raybo::LoginCheckRsp* UserToServerRsp::mutable_login_check() {
  ::raybo::LoginCheckRsp* _msg = _internal_mutable_login_check();
  // @@protoc_insertion_point(field_mutable:raybo.UserToServerRsp.login_check)
  return _msg;
}
inline void UserToServerRsp::set_allocated_login_check(::raybo::LoginCheckRsp* login_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_check_;
  }
  if (login_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_check);
    if (message_arena != submessage_arena) {
      login_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_check, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.login_check_ = login_check;
  // @@protoc_insertion_point(field_set_allocated:raybo.UserToServerRsp.login_check)
}

// optional .raybo.CheckUserExistRsp check_user_exist = 5;
inline bool UserToServerRsp::_internal_has_check_user_exist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_user_exist_ != nullptr);
  return value;
}
inline bool UserToServerRsp::has_check_user_exist() const {
  return _internal_has_check_user_exist();
}
inline void UserToServerRsp::clear_check_user_exist() {
  if (_impl_.check_user_exist_ != nullptr) _impl_.check_user_exist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::raybo::CheckUserExistRsp& UserToServerRsp::_internal_check_user_exist() const {
  const ::raybo::CheckUserExistRsp* p = _impl_.check_user_exist_;
  return p != nullptr ? *p : reinterpret_cast<const ::raybo::CheckUserExistRsp&>(
      ::raybo::_CheckUserExistRsp_default_instance_);
}
inline const ::raybo::CheckUserExistRsp& UserToServerRsp::check_user_exist() const {
  // @@protoc_insertion_point(field_get:raybo.UserToServerRsp.check_user_exist)
  return _internal_check_user_exist();
}
inline void UserToServerRsp::unsafe_arena_set_allocated_check_user_exist(
    ::raybo::CheckUserExistRsp* check_user_exist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_user_exist_);
  }
  _impl_.check_user_exist_ = check_user_exist;
  if (check_user_exist) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raybo.UserToServerRsp.check_user_exist)
}
inline ::raybo::CheckUserExistRsp* UserToServerRsp::release_check_user_exist() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::CheckUserExistRsp* temp = _impl_.check_user_exist_;
  _impl_.check_user_exist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::raybo::CheckUserExistRsp* UserToServerRsp::unsafe_arena_release_check_user_exist() {
  // @@protoc_insertion_point(field_release:raybo.UserToServerRsp.check_user_exist)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::raybo::CheckUserExistRsp* temp = _impl_.check_user_exist_;
  _impl_.check_user_exist_ = nullptr;
  return temp;
}
inline ::raybo::CheckUserExistRsp* UserToServerRsp::_internal_mutable_check_user_exist() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.check_user_exist_ == nullptr) {
    auto* p = CreateMaybeMessage<::raybo::CheckUserExistRsp>(GetArenaForAllocation());
    _impl_.check_user_exist_ = p;
  }
  return _impl_.check_user_exist_;
}
inline ::raybo::CheckUserExistRsp* UserToServerRsp::mutable_check_user_exist() {
  ::raybo::CheckUserExistRsp* _msg = _internal_mutable_check_user_exist();
  // @@protoc_insertion_point(field_mutable:raybo.UserToServerRsp.check_user_exist)
  return _msg;
}
inline void UserToServerRsp::set_allocated_check_user_exist(::raybo::CheckUserExistRsp* check_user_exist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.check_user_exist_;
  }
  if (check_user_exist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_user_exist);
    if (message_arena != submessage_arena) {
      check_user_exist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_user_exist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.check_user_exist_ = check_user_exist;
  // @@protoc_insertion_point(field_set_allocated:raybo.UserToServerRsp.check_user_exist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raybo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto
