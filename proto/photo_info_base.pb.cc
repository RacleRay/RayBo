// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: photo_info_base.proto

#include "photo_info_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raybo {
PROTOBUF_CONSTEXPR PhotoInfoBase::PhotoInfoBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ver_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.last_publisher_)*/0u
  , /*decltype(_impl_.last_publish_time_)*/0u
  , /*decltype(_impl_.last_publish_message_id_)*/0u} {}
struct PhotoInfoBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhotoInfoBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhotoInfoBaseDefaultTypeInternal() {}
  union {
    PhotoInfoBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhotoInfoBaseDefaultTypeInternal _PhotoInfoBase_default_instance_;
}  // namespace raybo
static ::_pb::Metadata file_level_metadata_photo_5finfo_5fbase_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_photo_5finfo_5fbase_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_photo_5finfo_5fbase_2eproto = nullptr;

const uint32_t TableStruct_photo_5finfo_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_.last_publisher_),
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_.last_publish_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::PhotoInfoBase, _impl_.last_publish_message_id_),
  0,
  1,
  2,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::raybo::PhotoInfoBase)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raybo::_PhotoInfoBase_default_instance_._instance,
};

const char descriptor_table_protodef_photo_5finfo_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025photo_info_base.proto\022\005raybo\"\363\001\n\rPhoto"
  "InfoBase\022\020\n\003ver\030\001 \001(\rH\000\210\001\001\022\024\n\007user_id\030\002 "
  "\001(\rH\001\210\001\001\022\033\n\016last_publisher\030\003 \001(\rH\002\210\001\001\022\036\n"
  "\021last_publish_time\030\004 \001(\rH\003\210\001\001\022$\n\027last_pu"
  "blish_message_id\030\005 \001(\rH\004\210\001\001B\006\n\004_verB\n\n\010_"
  "user_idB\021\n\017_last_publisherB\024\n\022_last_publ"
  "ish_timeB\032\n\030_last_publish_message_idb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_photo_5finfo_5fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_photo_5finfo_5fbase_2eproto = {
    false, false, 284, descriptor_table_protodef_photo_5finfo_5fbase_2eproto,
    "photo_info_base.proto",
    &descriptor_table_photo_5finfo_5fbase_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_photo_5finfo_5fbase_2eproto::offsets,
    file_level_metadata_photo_5finfo_5fbase_2eproto, file_level_enum_descriptors_photo_5finfo_5fbase_2eproto,
    file_level_service_descriptors_photo_5finfo_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_photo_5finfo_5fbase_2eproto_getter() {
  return &descriptor_table_photo_5finfo_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_photo_5finfo_5fbase_2eproto(&descriptor_table_photo_5finfo_5fbase_2eproto);
namespace raybo {

// ===================================================================

class PhotoInfoBase::_Internal {
 public:
  using HasBits = decltype(std::declval<PhotoInfoBase>()._impl_._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_publisher(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_publish_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_publish_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PhotoInfoBase::PhotoInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raybo.PhotoInfoBase)
}
PhotoInfoBase::PhotoInfoBase(const PhotoInfoBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.last_publisher_){}
    , decltype(_impl_.last_publish_time_){}
    , decltype(_impl_.last_publish_message_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ver_, &from._impl_.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_publish_message_id_) -
    reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.last_publish_message_id_));
  // @@protoc_insertion_point(copy_constructor:raybo.PhotoInfoBase)
}

inline void PhotoInfoBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ver_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.last_publisher_){0u}
    , decltype(_impl_.last_publish_time_){0u}
    , decltype(_impl_.last_publish_message_id_){0u}
  };
}

PhotoInfoBase::~PhotoInfoBase() {
  // @@protoc_insertion_point(destructor:raybo.PhotoInfoBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhotoInfoBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PhotoInfoBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhotoInfoBase::Clear() {
// @@protoc_insertion_point(message_clear_start:raybo.PhotoInfoBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_publish_message_id_) -
        reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.last_publish_message_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhotoInfoBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          _impl_.ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_publisher = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_publisher(&has_bits);
          _impl_.last_publisher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_publish_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_publish_time(&has_bits);
          _impl_.last_publish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_publish_message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_publish_message_id(&has_bits);
          _impl_.last_publish_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhotoInfoBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raybo.PhotoInfoBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 ver = 1;
  if (_internal_has_ver()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 user_id = 2;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional uint32 last_publisher = 3;
  if (_internal_has_last_publisher()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_publisher(), target);
  }

  // optional uint32 last_publish_time = 4;
  if (_internal_has_last_publish_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_publish_time(), target);
  }

  // optional uint32 last_publish_message_id = 5;
  if (_internal_has_last_publish_message_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_publish_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raybo.PhotoInfoBase)
  return target;
}

size_t PhotoInfoBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raybo.PhotoInfoBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
    }

    // optional uint32 last_publisher = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_publisher());
    }

    // optional uint32 last_publish_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_publish_time());
    }

    // optional uint32 last_publish_message_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_publish_message_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhotoInfoBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PhotoInfoBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhotoInfoBase::GetClassData() const { return &_class_data_; }

void PhotoInfoBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PhotoInfoBase *>(to)->MergeFrom(
      static_cast<const PhotoInfoBase &>(from));
}


void PhotoInfoBase::MergeFrom(const PhotoInfoBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raybo.PhotoInfoBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.last_publisher_ = from._impl_.last_publisher_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.last_publish_time_ = from._impl_.last_publish_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.last_publish_message_id_ = from._impl_.last_publish_message_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhotoInfoBase::CopyFrom(const PhotoInfoBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raybo.PhotoInfoBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoInfoBase::IsInitialized() const {
  return true;
}

void PhotoInfoBase::InternalSwap(PhotoInfoBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhotoInfoBase, _impl_.last_publish_message_id_)
      + sizeof(PhotoInfoBase::_impl_.last_publish_message_id_)
      - PROTOBUF_FIELD_OFFSET(PhotoInfoBase, _impl_.ver_)>(
          reinterpret_cast<char*>(&_impl_.ver_),
          reinterpret_cast<char*>(&other->_impl_.ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhotoInfoBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_photo_5finfo_5fbase_2eproto_getter, &descriptor_table_photo_5finfo_5fbase_2eproto_once,
      file_level_metadata_photo_5finfo_5fbase_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raybo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raybo::PhotoInfoBase*
Arena::CreateMaybeMessage< ::raybo::PhotoInfoBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raybo::PhotoInfoBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
