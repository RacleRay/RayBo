// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info_base.proto

#include "user_info_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raybo {
PROTOBUF_CONSTEXPR UserInfoBase::UserInfoBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ver_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.reg_time_)*/0u
  , /*decltype(_impl_.from_)*/0u
  , /*decltype(_impl_.login_time_)*/0u
  , /*decltype(_impl_.last_login_time_)*/0u
  , /*decltype(_impl_.fresh_time_)*/0u
  , /*decltype(_impl_.logout_time_)*/0u} {}
struct UserInfoBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoBaseDefaultTypeInternal() {}
  union {
    UserInfoBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoBaseDefaultTypeInternal _UserInfoBase_default_instance_;
}  // namespace raybo
static ::_pb::Metadata file_level_metadata_user_5finfo_5fbase_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_user_5finfo_5fbase_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_user_5finfo_5fbase_2eproto = nullptr;

const uint32_t TableStruct_user_5finfo_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.reg_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.login_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.last_login_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.fresh_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.logout_time_),
  PROTOBUF_FIELD_OFFSET(::raybo::UserInfoBase, _impl_.password_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  9,
  10,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::raybo::UserInfoBase)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raybo::_UserInfoBase_default_instance_._instance,
};

const char descriptor_table_protodef_user_5finfo_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024user_info_base.proto\022\005raybo\"\246\003\n\014UserIn"
  "foBase\022\020\n\003ver\030\001 \001(\rH\000\210\001\001\022\024\n\007user_id\030\002 \001("
  "\rH\001\210\001\001\022\026\n\tuser_name\030\003 \001(\tH\002\210\001\001\022\026\n\tnick_n"
  "ame\030\004 \001(\tH\003\210\001\001\022\025\n\010reg_time\030\005 \001(\rH\004\210\001\001\022\021\n"
  "\004from\030\006 \001(\rH\005\210\001\001\022\027\n\nlogin_time\030\007 \001(\rH\006\210\001"
  "\001\022\034\n\017last_login_time\030\010 \001(\rH\007\210\001\001\022\027\n\nfresh"
  "_time\030\t \001(\rH\010\210\001\001\022\030\n\013logout_time\030\n \001(\rH\t\210"
  "\001\001\022\025\n\010password\030\013 \001(\tH\n\210\001\001B\006\n\004_verB\n\n\010_us"
  "er_idB\014\n\n_user_nameB\014\n\n_nick_nameB\013\n\t_re"
  "g_timeB\007\n\005_fromB\r\n\013_login_timeB\022\n\020_last_"
  "login_timeB\r\n\013_fresh_timeB\016\n\014_logout_tim"
  "eB\013\n\t_passwordb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_user_5finfo_5fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_5finfo_5fbase_2eproto = {
    false, false, 462, descriptor_table_protodef_user_5finfo_5fbase_2eproto,
    "user_info_base.proto",
    &descriptor_table_user_5finfo_5fbase_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_user_5finfo_5fbase_2eproto::offsets,
    file_level_metadata_user_5finfo_5fbase_2eproto, file_level_enum_descriptors_user_5finfo_5fbase_2eproto,
    file_level_service_descriptors_user_5finfo_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_5finfo_5fbase_2eproto_getter() {
  return &descriptor_table_user_5finfo_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_5finfo_5fbase_2eproto(&descriptor_table_user_5finfo_5fbase_2eproto);
namespace raybo {

// ===================================================================

class UserInfoBase::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfoBase>()._impl_._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nick_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reg_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_login_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_login_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fresh_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_logout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserInfoBase::UserInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:raybo.UserInfoBase)
}
UserInfoBase::UserInfoBase(const UserInfoBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.nick_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.reg_time_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.login_time_){}
    , decltype(_impl_.last_login_time_){}
    , decltype(_impl_.fresh_time_){}
    , decltype(_impl_.logout_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    _impl_.user_name_.Set(from._internal_user_name(), 
      GetArenaForAllocation());
  }
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nick_name()) {
    _impl_.nick_name_.Set(from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _impl_.password_.Set(from._internal_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ver_, &from._impl_.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logout_time_) -
    reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.logout_time_));
  // @@protoc_insertion_point(copy_constructor:raybo.UserInfoBase)
}

inline void UserInfoBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.nick_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.ver_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.reg_time_){0u}
    , decltype(_impl_.from_){0u}
    , decltype(_impl_.login_time_){0u}
    , decltype(_impl_.last_login_time_){0u}
    , decltype(_impl_.fresh_time_){0u}
    , decltype(_impl_.logout_time_){0u}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfoBase::~UserInfoBase() {
  // @@protoc_insertion_point(destructor:raybo.UserInfoBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.nick_name_.Destroy();
  _impl_.password_.Destroy();
}

void UserInfoBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfoBase::Clear() {
// @@protoc_insertion_point(message_clear_start:raybo.UserInfoBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nick_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_time_) -
        reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.login_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.last_login_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.logout_time_) -
        reinterpret_cast<char*>(&_impl_.last_login_time_)) + sizeof(_impl_.logout_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          _impl_.ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raybo.UserInfoBase.user_name"));
        } else
          goto handle_unusual;
        continue;
      // optional string nick_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raybo.UserInfoBase.nick_name"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reg_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reg_time(&has_bits);
          _impl_.reg_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 from = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_from(&has_bits);
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 login_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_login_time(&has_bits);
          _impl_.login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_login_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_login_time(&has_bits);
          _impl_.last_login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fresh_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_fresh_time(&has_bits);
          _impl_.fresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 logout_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_logout_time(&has_bits);
          _impl_.logout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string password = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raybo.UserInfoBase.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raybo.UserInfoBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 ver = 1;
  if (_internal_has_ver()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 user_id = 2;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional string user_name = 3;
  if (_internal_has_user_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raybo.UserInfoBase.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional string nick_name = 4;
  if (_internal_has_nick_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raybo.UserInfoBase.nick_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nick_name(), target);
  }

  // optional uint32 reg_time = 5;
  if (_internal_has_reg_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reg_time(), target);
  }

  // optional uint32 from = 6;
  if (_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_from(), target);
  }

  // optional uint32 login_time = 7;
  if (_internal_has_login_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_login_time(), target);
  }

  // optional uint32 last_login_time = 8;
  if (_internal_has_last_login_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_login_time(), target);
  }

  // optional uint32 fresh_time = 9;
  if (_internal_has_fresh_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fresh_time(), target);
  }

  // optional uint32 logout_time = 10;
  if (_internal_has_logout_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_logout_time(), target);
  }

  // optional string password = 11;
  if (_internal_has_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raybo.UserInfoBase.password");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raybo.UserInfoBase)
  return target;
}

size_t UserInfoBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raybo.UserInfoBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string nick_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nick_name());
    }

    // optional string password = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
    }

    // optional uint32 reg_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_time());
    }

    // optional uint32 from = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
    }

    // optional uint32 login_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 last_login_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_login_time());
    }

    // optional uint32 fresh_time = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fresh_time());
    }

    // optional uint32 logout_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logout_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfoBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoBase::GetClassData() const { return &_class_data_; }

void UserInfoBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfoBase *>(to)->MergeFrom(
      static_cast<const UserInfoBase &>(from));
}


void UserInfoBase::MergeFrom(const UserInfoBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raybo.UserInfoBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_nick_name(from._internal_nick_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.reg_time_ = from._impl_.reg_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.from_ = from._impl_.from_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.login_time_ = from._impl_.login_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.last_login_time_ = from._impl_.last_login_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.fresh_time_ = from._impl_.fresh_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.logout_time_ = from._impl_.logout_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoBase::CopyFrom(const UserInfoBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raybo.UserInfoBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoBase::IsInitialized() const {
  return true;
}

void UserInfoBase::InternalSwap(UserInfoBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfoBase, _impl_.logout_time_)
      + sizeof(UserInfoBase::_impl_.logout_time_)
      - PROTOBUF_FIELD_OFFSET(UserInfoBase, _impl_.ver_)>(
          reinterpret_cast<char*>(&_impl_.ver_),
          reinterpret_cast<char*>(&other->_impl_.ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_5finfo_5fbase_2eproto_getter, &descriptor_table_user_5finfo_5fbase_2eproto_once,
      file_level_metadata_user_5finfo_5fbase_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raybo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raybo::UserInfoBase*
Arena::CreateMaybeMessage< ::raybo::UserInfoBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raybo::UserInfoBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
